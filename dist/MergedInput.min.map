{"version":3,"sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/./main.js","webpack://MergedInput/./configs/bearings.js","webpack://MergedInput/./controlManager.js","webpack://MergedInput/./configs/pad_generic.js","webpack://MergedInput/./configs/pad_unlicensedSNES.js","webpack://MergedInput/./configs/pad_xbox360.js","webpack://MergedInput/./configs/pad_dualshock.js","webpack://MergedInput/webpack/bootstrap"],"names":["root","factory","exports","module","define","amd","window","MergedInput","scene","pluginManager","players","gamepads","keys","bearings","dpadMappings","controlManager","this","eventEmitter","systems","events","Phaser","Events","EventEmitter","game","on","Core","PRE_STEP","preupdate","POST_STEP","postupdate","BLUR","loseFocus","input","gamepad","thisGamepad","refreshGamepads","setupGamepad","refreshPads","total","emit","gamepadButtonDown","gamepadButtonUp","keyboard","keyboardKeyDown","keyboardKeyUp","mouse","disableContextMenu","thisPlayer","pointer","BEARING","BEARING_DEGREES","ANGLE","direction","mapDirectionsToBearing","BEARING_LAST","DEGREES","parseFloat","mapBearingToDegrees","DEGREES_LAST","direction_secondary","checkKeyboardInput","checkGamepadInput","checkPointerInput","clearBuffer","interaction","pressed","length","internal","fakedpadPressed","buffer","interaction_mapped","fakedpadReleased","released","thisKey","reset","device","id","player","index","action","addPlayer","thisButton","gamepadID","toLowerCase","mappedPad","mapGamepad","gamepadMapping","gamepadType","padType","buttons_mapped","filter","el","entries","fakedpad","buttons","numberOfButtons","Number","isInteger","newPlayer","setupControls","addPlayerHelperFunctions","push","pointerMove","pointerDown","pointerUp","isPressed","button","matchedButtons","Array","x","includes","isReleased","setDevice","key","actions","Object","buttonID","toString","replace","find","value","append","getPlayerActions","addKey","Input","Keyboard","KeyCodes","thisValue","isDown","TIMESTAMP","sys","time","now","event","keyCode","playerIndex","getPlayerIndexFromKey","playerAction","getPlayerButtonFromKey","getPlayer","state","last","lastPressed","mappedButton","getMappedButton","lastReleased","pad","dpadMapping","fakedpadBuffer","Gamepad","Button","leftStick","y","UP","Math","abs","gamepadFakeDPadPress","DOWN","up","down","LEFT","RIGHT","left","right","gamepadFakeDPadRelease","rightStick","b","threshold","angleToPointer","distance","pointerDirection","getBearingFromAngle","angle","position","Angle","Between","worldX","worldY","pointerAngle","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","moveTime","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","numDirections","snap_interval","PI2","angleSnap","Snap","To","angleSnapDeg","RadToDeg","bearing","thisDirection","toUpperCase","directions","shutdown","undefined","debug","i","axes","a","axis","getValue","Plugins","ScenePlugin","padConfig","pad_generic","pad_unlicensedSNES","pad_xbox360","pad_dualshock","RC_S","RC_E","RC_W","RC_N","START","SELECT","LB","RB","LT","RT","LS","RS","LC_N","LC_S","LC_W","LC_E","MENU","controls","getBaseControls","setPosition","padID","TOUCH","installedModules","__webpack_require__","m","modules","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","hasOwnProperty","call","p","s","moduleId","l"],"mappings":"AAAA,UAA2CA,EAAMC,GAC1B,UAAnB,OAAOC,SAA0C,UAAlB,OAAOC,OACxCA,OAAOD,QAAUD,EAAQ,EACA,YAAlB,OAAOG,QAAyBA,OAAOC,IAC9CD,OAAO,cAAe,GAAIH,CAAO,EACP,UAAnB,OAAOC,QACdA,QAAqB,YAAID,EAAQ,EAEjCD,EAAkB,YAAIC,EAAQ,CAC/B,EAAEK,OAAQ,WACX,O,y3BCVA,I,IAAA,I,MACA,I,4RAEqBC,E,+IAUpB,WAAYC,EAAOC,G,GAAe,2B,iKAAA,uDAC3BD,EAAOC,CADoB,IAE5BD,MAAQA,EAGb,EAAKE,QAAU,GAEf,EAAKC,SAAW,GAEhB,EAAKC,KAAO,GAEZ,EAAKC,SAAWA,UAEhB,EAAKC,aAAe,CACnB,GAAM,GACN,KAAQ,GACR,KAAQ,GACR,MAAS,EAJU,EAOpB,EAAKC,eAAiB,IAAIA,UApBO,E,wDAqBjC,C,yNAEM,WAcN,GAZAC,KAAKC,aAAeD,KAAKE,QAAQC,OAEjCH,KAAKG,OAAS,IAAIC,OAAOC,OAAOC,aAEhCN,KAAKO,KAAKJ,OAAOK,GAAGJ,OAAOK,KAAKJ,OAAOK,SAAUV,KAAKW,UAAWX,IAAjE,EACAA,KAAKO,KAAKJ,OAAOK,GAAGJ,OAAOK,KAAKJ,OAAOO,UAAWZ,KAAKa,WAAYb,IAAnE,EAEAA,KAAKO,KAAKJ,OAAOK,GAAGJ,OAAOK,KAAKJ,OAAOS,KAAM,WAC5C,EAAKC,UAAL,CACA,CAFD,EAK0C,SAA/Bf,KAAKE,QAAQc,MAAMC,QAAyB,CAQtD,GAPAjB,KAAKE,QAAQc,MAAMC,QAAQT,GAAG,YAAa,SAAUU,GACpDlB,KAAKmB,gBAAL,EACAnB,KAAKoB,aAAaF,CAAlB,CACA,EAAElB,IAHH,EAMAA,KAAKE,QAAQc,MAAMC,QAAQI,YAA3B,EACIrB,KAAKE,QAAQc,MAAMC,QAAQK,MAAO,CACrCtB,KAAKmB,gBAAL,EADqC,2BAErC,YAA0BnB,KAAKL,SAA/B,+CAAyC,KAA9BuB,EAA8B,QACxClB,KAAKE,QAAQc,MAAMC,QAAQM,KAAK,YAAaL,CAA7C,CACA,CAJoC,8EAKrC,CAEDlB,KAAKE,QAAQc,MAAMC,QAAQT,GAAG,OAAQR,KAAKwB,kBAAmBxB,IAA9D,EACAA,KAAKE,QAAQc,MAAMC,QAAQT,GAAG,KAAMR,KAAKyB,gBAAiBzB,IAA1D,CACA,CAGDA,KAAKE,QAAQc,MAAMU,SAASlB,GAAG,UAAWR,KAAK2B,gBAAiB3B,IAAhE,EACAA,KAAKE,QAAQc,MAAMU,SAASlB,GAAG,QAASR,KAAK4B,cAAe5B,IAA5D,EAIAA,KAAKE,QAAQc,MAAMa,MAAMC,mBAAzB,CACA,C,oCAEW,2BAEX,YAAuB9B,KAAKN,QAA5B,+CAAqC,KAA5BqC,EAA4B,QAEpCA,EAAWC,QAAQC,QAA+C,SAA9BF,EAAWC,QAAQC,QAAyBF,EAAWC,QAAQC,QAAU,GAC7GF,EAAWC,QAAQE,gBAA+D,SAAtCH,EAAWC,QAAQE,gBAAiCH,EAAWC,QAAQE,gBAAkB,EACrIH,EAAWC,QAAQG,MAA2C,SAA5BJ,EAAWC,QAAQG,MAAuBJ,EAAWC,QAAQG,MAAQ,GAGvGJ,EAAWK,UAAUH,QAAUjC,KAAKqC,uBAAuBN,EAAWK,SAAvC,EAC/BL,EAAWK,UAAUE,aAA+C,IAAhCP,EAAWK,UAAUH,QAAgBF,EAAWK,UAAUH,QAAUF,EAAWK,UAAUE,aAC7HP,EAAWK,UAAUG,QAA0C,IAAhCR,EAAWK,UAAUH,QAAgBO,WAAWxC,KAAKyC,oBAAoBV,EAAWK,UAAUH,OAA9C,CAAX,EAAqE,EACzIF,EAAWK,UAAUM,aAAoD,IAArCX,EAAWK,UAAUE,aAAqBE,WAAWxC,KAAKyC,oBAAoBV,EAAWK,UAAUE,YAA9C,CAAX,EAA0E,EACxJP,EAAWY,oBAAoBV,QAAUjC,KAAKqC,uBAAuBN,EAAWY,mBAAvC,EACzCZ,EAAWY,oBAAoBL,aAAyD,IAA1CP,EAAWY,oBAAoBV,QAAgBF,EAAWY,oBAAoBV,QAAUF,EAAWY,oBAAoBL,aACrKP,EAAWY,oBAAoBJ,QAAoD,IAA1CR,EAAWY,oBAAoBV,QAAgBO,WAAWxC,KAAKyC,oBAAoBV,EAAWY,oBAAoBV,OAAxD,CAAX,EAA+E,EACvKF,EAAWY,oBAAoBD,aAA8D,IAA/CX,EAAWY,oBAAoBL,aAAqBE,WAAWxC,KAAKyC,oBAAoBV,EAAWY,oBAAoBL,YAAxD,CAAX,EAAoF,CACtL,CAjBU,8EAmBXtC,KAAK4C,mBAAL,EACA5C,KAAK6C,kBAAL,EACA7C,KAAK8C,kBAAL,CACA,C,qCAEY,2BAEZ,YAAuB9C,KAAKN,QAA5B,+CAAqC,KAA5BqC,EAA4B,QAEpC/B,KAAK+C,YAAYhB,CAAjB,CACA,CALW,8EAMZ,C,oCAQWA,GACiC,EAAxCA,EAAWiB,YAAYC,QAAQC,QAA4D,GAA9CnB,EAAWoB,SAASC,gBAAgBF,SACpFnB,EAAWiB,YAAYK,OAAS,IAEW,GAAxCtB,EAAWiB,YAAYK,OAAOH,SACjCnB,EAAWiB,YAAYC,QAAU,GACjClB,EAAWuB,mBAAmBL,QAAU,GACW,GAA/ClB,EAAWoB,SAASI,iBAAiBL,UACxCnB,EAAWiB,YAAYQ,SAAW,GAClCzB,EAAWuB,mBAAmBE,SAAW,IAI3CzB,EAAWoB,SAASC,gBAAkB,GACtCrB,EAAWoB,SAASI,iBAAmB,EACvC,C,oCAQA,IAAK,IAAIE,KAAWzD,KAAKJ,KACxBI,KAAKJ,KAAK6D,GAASC,MAAnB,CAED,C,qCAKYxC,GACZlB,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,UAAWC,GAAI1C,EAAY0C,GAAIC,OAAQ3C,EAAY4C,MAAOC,OAAQ,WAA5E,CAAtC,EACA/D,KAAKG,OAAOoB,KAAK,oBAAqBL,CAAtC,EAE+C,SAApClB,KAAKN,QAAQwB,EAAY4C,QACnC9D,KAAKgE,UAAL,EAGD,IAOSC,EAPLC,EAAYhD,EAAY0C,GAAGO,YAAf,EAIZC,GAHJpE,KAAKN,QAAQwB,EAAY4C,OAAO7C,QAAUC,EAG1BlB,KAAKD,eAAesE,WAAWH,CAA/B,GAGhB,IAASD,KAFTjE,KAAKN,QAAQwB,EAAY4C,OAAOQ,eAAiBF,EAAUE,eAC3DtE,KAAKN,QAAQwB,EAAY4C,OAAOR,mBAAmBiB,YAAcH,EAAUI,QACpDxE,KAAKN,QAAQwB,EAAY4C,OAAOQ,eACtDtE,KAAKN,QAAQwB,EAAY4C,OAAOW,eAAeR,GAAc,CAE9D,C,0CAKAjE,KAAKL,SAAWK,KAAKE,QAAQc,MAAMC,QAAQtB,SAAS+E,OAAO,SAAUC,GACpE,OAAa,MAANA,CACP,CAFe,EAFC,2BAMjB,YAAmC3E,KAAKL,SAASiF,QAAd,EAAnC,+CAA4D,oBAAhDd,EAAgD,KAAzC5C,EAAyC,KAC3DA,EAAY4C,MAAQA,EAKpB5C,EAAY2D,SAAW3D,EAAY4D,QAAQ5B,OAAS,EACpD,CAbgB,8EAcjB,C,kCAOSY,EAAOiB,GAEhB,OADAA,EAAkBA,GAAmB,GACjC,EAAOC,OAAOC,UAAUnB,CAAjB,CAAP,GAAiE,SAAxB9D,KAAKN,QAAQoE,GAClD9D,KAAKN,QAAQoE,IAIhBoB,EAAYlF,KAAKD,eAAeoF,cAAcJ,CAAlC,EAGhB/E,KAAKoF,yBAAyBF,CAA9B,EAGAlF,KAAKN,QAAQ2F,KAAKH,CAAlB,EAEAlF,KAAKN,QAAQM,KAAKN,QAAQwD,OAAS,GAAGY,MAAQ9D,KAAKN,QAAQwD,OAAS,EAGzC,GAAvBlD,KAAKN,QAAQwD,SAChBlD,KAAKE,QAAQc,MAAMR,GAAG,cAAe,SAAUwB,GAC9ChC,KAAKsF,YAAYtD,CAAjB,CACA,EAAEhC,IAFH,EAIAA,KAAKE,QAAQc,MAAMR,GAAG,cAAe,SAAUwB,GAC9ChC,KAAKuF,YAAYvD,CAAjB,CACA,EAAEhC,IAFH,EAIAA,KAAKE,QAAQc,MAAMR,GAAG,YAAa,SAAUwB,GAC5ChC,KAAKwF,UAAUxD,CAAf,CACA,EAAEhC,IAFH,GAKMA,KAAKN,QAAQM,KAAKN,QAAQwD,OAAS,GAE3C,C,iDAMwBW,GAAQ,WAkDhC,OA7CAA,EAAOb,YAAYyC,UAAY,SAACC,GAE3BC,GADJD,EAA4B,UAAlB,OAAOA,EAAuBE,MAAMF,CAAN,EAAgBA,GAC5BhB,OAAO,SAAAmB,GAAA,OAAKhC,EAAOb,YAAYC,QAAQ6C,SAASD,CAApC,CAAL,CAAd,EACrB,MAAOF,IAAezC,QAASyC,CAC/B,EAKD9B,EAAOb,YAAY+C,WAAa,SAACL,GAE5BC,GADJD,EAA4B,UAAlB,OAAOA,EAAuBE,MAAMF,CAAN,EAAgBA,GAC5BhB,OAAO,SAAAmB,GAAA,OAAKhC,EAAOb,YAAYQ,SAASsC,SAASD,CAArC,CAAL,CAAd,EACrB,MAAOF,IAAezC,QAASyC,CAC/B,EAMD9B,EAAOP,mBAAmBmC,UAAY,SAACC,GAElCC,GADJD,EAA4B,UAAlB,OAAOA,EAAuBE,MAAMF,CAAN,EAAgBA,GAC5BhB,OAAO,SAAAmB,GAAA,OAAKhC,EAAOP,mBAAmBL,QAAQ6C,SAASD,CAA3C,CAAL,CAAd,EACrB,MAAOF,IAAezC,QAASyC,CAC/B,EAMD9B,EAAOP,mBAAmByC,WAAa,SAACL,GAEnCC,GADJD,EAA4B,UAAlB,OAAOA,EAAuBE,MAAMF,CAAN,EAAgBA,GAC5BhB,OAAO,SAAAmB,GAAA,OAAKhC,EAAOP,mBAAmBE,SAASsC,SAASD,CAA5C,CAAL,CAAd,EACrB,MAAOF,IAAezC,QAASyC,CAC/B,EAED9B,EAAOmC,UAAY,SAACrC,GAOnB,OANIE,EAAOb,YAAYW,QAAUA,IAChC,EAAK1D,aAAasB,KAAK,cAAe,CAAEoC,OAAQA,EAAQE,OAAQA,EAAOC,MAAOC,OAAQ,gBAAhD,CAAtC,EACA,EAAK5D,OAAOoB,KAAK,iBAAkB,CAAEsC,OAAQA,EAAOC,MAAOH,OAAQA,CAAhC,CAAnC,GAEDE,EAAOb,YAAYW,OAASA,EAErB,CACP,EAEM3D,IACP,C,kCAMS8D,GACT,OAAsC,SAAxB9D,KAAKN,QAAQoE,GAAyB9D,KAAKN,QAAQoE,GAAS,EAC1E,C,8CAEqBmC,GAAK,2BAC1B,YAAuBjG,KAAKN,QAA5B,+CAAqC,KAE3B+D,EAFD1B,EAA4B,QAEpC,IAAS0B,KAAW1B,EAAWnC,KAAM,4BACpC,YAAsBmC,EAAWnC,KAAK6D,GAAtC,+CACC,GAD+C,SAC9BwC,EAChB,OAAOlE,EAAW+B,KAHgB,8EAMpC,CACD,CAVyB,8EAW1B,MAAO,CAAC,CACR,C,+CAEsBmC,GAAK,2BAC3B,YAAuBjG,KAAKN,QAA5B,+CAAqC,KAE3B+D,EAFD1B,EAA4B,QAEpC,IAAS0B,KAAW1B,EAAWnC,KAAM,4BACpC,YAAsBmC,EAAWnC,KAAK6D,GAAtC,+CACC,GAD+C,SAC9BwC,EAEhB,OAAkD,SAAvClE,EAAWuC,eAAeb,GAC7B,IAAM1B,EAAWuC,eAAeb,GAGhCA,CAR0B,8EAYpC,CACD,CAhB0B,8EAiB3B,MAAO,EACP,C,yCAQgBI,GAChB,IAAIqC,EAAU,CAAC,KAAM,OAAQ,OAAQ,QAAS,SAAU,WAAY,WAAY,aAIhF,OAHAA,EAAQb,KAAR,MAAAa,EAAA,EAAgBC,OAAOvG,KAAKI,KAAKN,QAAQmE,GAAQS,cAAjC,CAAhB,GACA4B,EAAQb,KAAR,MAAAa,EAAA,EAAgBC,OAAOvG,KAAKI,KAAKN,QAAQmE,GAAQiB,OAAjC,CAAhB,GAEOoB,CACP,C,wCAOerC,EAAQuC,GAEvB,OADAA,EAAWA,EAASC,SAAT,EAAoBC,QAAQ,MAAO,EAAnC,EACJH,OAAOvG,KAAKiE,EAAOS,cAAnB,EAAmCiC,KAAK,SAAAN,GAAA,OAAOpC,EAAOS,eAAe2B,IAAQG,CAArC,CAAxC,CACP,C,oCAWoD,IAA3CvC,EAA2C,uDAAlC,EAAGE,EAA+B,aAAvByC,EAAuB,aAAhBC,EAAgB,wDAkBpD,OAhBoC,SAAzBzG,KAAKN,QAAQmE,IACvB7D,KAAKgE,UAAL,EAGGhE,KAAK0G,iBAAiB7C,CAAtB,EAA8BiC,SAAS/B,CAAvC,IACC0C,GAAwD,SAAtCzG,KAAKN,QAAQmE,GAAQjE,KAAKmE,KAI/C/D,KAAKN,QAAQmE,GAAQjE,KAAKmE,GAAU,IACpC/D,KAAKN,QAAQmE,GAAQjE,KAAKmE,GAAQsB,KAAK,CAACmB,EAAxC,EAGDxG,KAAKJ,KAAK,CAAC4G,IAAUxG,KAAKE,QAAQc,MAAMU,SAASiF,OAAOvG,OAAOwG,MAAMC,SAASC,SAASN,EAAlE,GAGfxG,IACP,C,6CAKoB,2BAEpB,YAAuBA,KAAKN,QAA5B,+CAAqC,KAE3B+D,EAFD1B,EAA4B,QAEpC,IAAS0B,KAAW1B,EAAWnC,KAAM,CACpC,IAAImE,EAAS,EADuB,uBAEpC,YAAsBhC,EAAWnC,KAAK6D,GAAtC,+CAAgD,IAAvCsD,EAAuC,QAE/ChD,EAAU/D,KAAKJ,KAAKmH,GAAWC,OAAU,EAAIjD,CAJV,8EAUhC,CAAC,KAAM,OAAQ,OAAQ,SAAS+B,SAASrC,CAAzC,GACH1B,EAAWK,UAAUqB,GAAWM,EAChChC,EAAWK,UAAU6E,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,KAG7C,CAAC,SAAU,WAAY,WAAY,aAAatB,SAASrC,CAAzD,EAEM,IADd1B,EAAWY,oBAAoBc,EAAQ6C,QAAQ,OAAQ,EAAxB,GAA+BvC,KAE7DhC,EAAWY,oBAAoBsE,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,KAIxD3D,KAAW1B,EAAWuC,gBAE9BvC,EAAW+C,QAAQ,IAAM/C,EAAWuC,eAAeb,IAAYM,EAEjD,IADdhC,EAAW0C,eAAehB,GAAWM,KAEpChC,EAAW+C,QAAQmC,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,MAMtC,IADdrF,EAAW+C,QAAQrB,GAAWM,KAE7BhC,EAAW+C,QAAQmC,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,KAKvC,GAAVrD,GACHhC,EAAWiE,UAAU,UAArB,CAED,CACD,CA/CmB,8EAgDpB,C,wCAMeqB,GACf,IAKKtF,EALDuF,EAAUnB,OAAOvG,KAAKQ,OAAOwG,MAAMC,SAASC,QAAlC,EAA4CP,KAAK,SAAAN,GAAA,OAAO7F,OAAOwG,MAAMC,SAASC,SAASb,KAASoB,EAAMC,OAArD,CAAjD,EACVC,EAAcvH,KAAKwH,sBAAsBF,CAA3B,EACdG,EAAezH,KAAK0H,uBAAuBJ,CAA5B,EAED,CAAC,EAAfC,GAAoC,IAAhBE,IACnB1F,EAAa/B,KAAK2H,UAAUJ,CAAf,EACjBvH,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,WAAY6C,MAAO,EAAG3C,OAAQ0D,EAAaxD,OAAQuD,EAASM,MAAO,MAA7E,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,mBAAoB,CAAEsC,OAAQ0D,EAAatB,IAAKqB,CAA5B,CAArC,EAEAvF,EAAWiE,UAAU,UAArB,EACAjE,EAAWiB,YAAYC,QAAQoC,KAAKoC,CAApC,EACA1F,EAAWiB,YAAYK,OAAOgC,KAAKoC,CAAnC,EACA1F,EAAWiB,YAAY6E,KAAOJ,EAC9B1F,EAAWiB,YAAY8E,YAAcL,EAGU,SAApCzH,KAAKF,aAAa2H,KAC5BA,EAAe,IAAMzH,KAAKF,aAAa2H,IAEQ,SAArC1F,EAAW+C,QAAQ2C,KAED,UADxBM,EAAe/H,KAAKgI,gBAAgBjG,EAAY0F,CAAjC,KAElB1F,EAAW0C,eAAesD,GAAgB,EAC1ChG,EAAWuB,mBAAmBL,QAAQoC,KAAK0C,CAA3C,EACAhG,EAAWuB,mBAAmBuE,KAAOE,EACrChG,EAAWuB,mBAAmBwE,YAAcC,EAC5ChG,EAAWuB,mBAAmBiB,YAAc,WAI/C,C,sCAMa8C,GACb,IAKKtF,EALDuF,EAAUnB,OAAOvG,KAAKQ,OAAOwG,MAAMC,SAASC,QAAlC,EAA4CP,KAAK,SAAAN,GAAA,OAAO7F,OAAOwG,MAAMC,SAASC,SAASb,KAASoB,EAAMC,OAArD,CAAjD,EACVC,EAAcvH,KAAKwH,sBAAsBF,CAA3B,EACdG,EAAezH,KAAK0H,uBAAuBJ,CAA5B,EAED,CAAC,EAAfC,GAAoC,IAAhBE,IACnB1F,EAAa/B,KAAK2H,UAAUJ,CAAf,EACjBvH,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,WAAY6C,MAAO,EAAG3C,OAAQ0D,EAAaxD,OAAQuD,EAASM,MAAO,MAA7E,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,iBAAkB,CAAEsC,OAAQ0D,EAAatB,IAAKqB,CAA5B,CAAnC,EAEAvF,EAAWiE,UAAU,UAArB,EACAjE,EAAWiB,YAAYQ,SAAS6B,KAAKoC,CAArC,EACA1F,EAAWiB,YAAYiF,aAAeR,EAGS,SAApCzH,KAAKF,aAAa2H,KAC5BA,EAAe,IAAMzH,KAAKF,aAAa2H,IAEQ,SAArC1F,EAAW+C,QAAQ2C,KAED,UADxBM,EAAe/H,KAAKgI,gBAAgBjG,EAAY0F,CAAjC,KAElB1F,EAAW0C,eAAesD,GAAgB,EAC1ChG,EAAWuB,mBAAmBE,SAAWuE,EACzChG,EAAWuB,mBAAmB2E,aAAeF,EAC7ChG,EAAWuB,mBAAmBiB,YAAc,WAI/C,C,4CAMmB,2BAEnB,YAAuBvE,KAAKN,QAA5B,+CAAqC,KAE3B+D,EAFD1B,EAA4B,QAEpC,IAAS0B,KAAW1B,EAAWnC,KAAM,4BACpC,YAAsBmC,EAAWnC,KAAK6D,GAAtC,+CAAgD,KAAvCsD,EAAuC,QAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,MAAMjB,SAASiB,EAAU,EAAlD,GAEuC,GAAtC/G,KAAKN,QAAQ,GAAGsC,QAAQ+E,KAC3BhF,EAAW+C,QAAQrB,GAAW,EAGhC,CARmC,8EASpC,CACD,CAdkB,8EAenB,C,0CAYiByE,EAAKxC,EAAQc,GAO9B,IAiBK2B,EAvBLnI,KAAKN,QAAQwI,EAAIpE,OAAOkC,UAAU,SAAlC,EACAhG,KAAKN,QAAQwI,EAAIpE,OAAOgB,QAAQmC,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAChEpH,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,UAAW6C,MAAOA,EAAO3C,OAAQqE,EAAIpE,MAAOC,OAAQ,IAAM2B,EAAO5B,MAAO8D,MAAO,MAAzF,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,qBAAsB,CAAEsC,OAAQqE,EAAIpE,MAAO4B,OAAQA,IAAIA,EAAO5B,KAAxC,CAAvC,EAGK,CAAC,GAAI,GAAI,GAAI,IAAIgC,SAASJ,EAAO5B,KAAjC,GAiBAqE,EAAcnI,KAAKF,aACnBsC,EAAY+D,OAAOvG,KAAKuI,CAAZ,EAAyB5B,KAAK,SAAAN,GAAA,OAAOkC,EAAYlC,IAAQP,EAAO5B,KAAlC,CAA9B,EAChB9D,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,UAAW6C,MAAO,EAAG3C,OAAQqE,EAAIpE,MAAOC,OAAQ3B,EAAWwF,MAAO,MAA5E,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,wBAAyB,CAAEsC,OAAQqE,EAAIpE,MAAO4B,OAAQtD,CAA7B,CAA1C,EAEApC,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYC,QAAQoC,KAAKjD,CAAjD,EACApC,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAY6E,KAAOzF,EAC3CpC,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAY8E,YAAc1F,EAClDpC,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYK,OAAOgC,KAAKjD,CAAhD,EACApC,KAAKN,QAAQwI,EAAIpE,OAAO1B,UAAU6E,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAItC,UADxBW,EAAe/H,KAAKgI,gBAAgBhI,KAAKN,QAAQwI,EAAIpE,OAAQ4B,EAAO5B,KAArD,KAElB9D,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBL,QAAQoC,KAAK0C,CAAxD,EACA/H,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBuE,KAAOE,EAClD/H,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBwE,YAAcC,KA/B1D/H,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYC,QAAQoC,KAAK,IAAMK,EAAO5B,KAA9D,EACA9D,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAY6E,KAAO,IAAMnC,EAAO5B,MACxD9D,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAY8E,YAAc,IAAMpC,EAAO5B,MAC/D9D,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYK,OAAOgC,KAAK,IAAMK,EAAO5B,KAA7D,EAI4B,UADxBiE,EAAe/H,KAAKgI,gBAAgBhI,KAAKN,QAAQwI,EAAIpE,OAAQ4B,EAAO5B,KAArD,KAElB9D,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBL,QAAQoC,KAAK0C,CAAxD,EACA/H,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBuE,KAAOE,EAClD/H,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBwE,YAAcC,GAwB3D,C,wCASeG,EAAKxC,EAAQc,GAQ5B,IAcK2B,EArBLnI,KAAKN,QAAQwI,EAAIpE,OAAOkC,UAAU,SAAlC,EACAhG,KAAKN,QAAQwI,EAAIpE,OAAOgB,QAAQmC,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAEhEpH,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,UAAW6C,MAAOA,EAAO3C,OAAQqE,EAAIpE,MAAOC,OAAQ,IAAM2B,EAAO5B,MAAO8D,MAAO,IAAzF,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,mBAAoB,CAAEsC,OAAQqE,EAAIpE,MAAO4B,OAAQA,IAAIA,EAAO5B,KAAxC,CAArC,EAGK,CAAC,GAAI,GAAI,GAAI,IAAIgC,SAASJ,EAAO5B,KAAjC,GAcAqE,EAAcnI,KAAKF,aACnBsC,EAAY+D,OAAOvG,KAAKuI,CAAZ,EAAyB5B,KAAK,SAAAN,GAAA,OAAOkC,EAAYlC,IAAQP,EAAO5B,KAAlC,CAA9B,EAChB9D,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,UAAW6C,MAAO,EAAG3C,OAAQqE,EAAIpE,MAAOC,OAAQ3B,EAAWwF,MAAO,IAA5E,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,sBAAuB,CAAEsC,OAAQqE,EAAIpE,MAAO4B,OAAQtD,CAA7B,CAAxC,EAEApC,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYQ,SAAS6B,KAAKjD,CAAlD,EACApC,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYiF,aAAe7F,EAIvB,UADxB2F,EAAe/H,KAAKgI,gBAAgBhI,KAAKN,QAAQwI,EAAIpE,OAAQ4B,EAAO5B,KAArD,KAElB9D,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBE,SAAWuE,EACtD/H,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmB2E,aAAeF,KAxB3D/H,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYQ,SAAS6B,KAAK,IAAMK,EAAO5B,KAA/D,EACA9D,KAAKN,QAAQwI,EAAIpE,OAAOd,YAAYiF,aAAe,IAAMvC,EAAO5B,MAIpC,UADxBiE,EAAe/H,KAAKgI,gBAAgBhI,KAAKN,QAAQwI,EAAIpE,OAAQ4B,EAAO5B,KAArD,KAElB9D,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmBE,SAAWuE,EACtD/H,KAAKN,QAAQwI,EAAIpE,OAAOR,mBAAmB2E,aAAeF,GAoB5D,C,6CAQoB9G,EAASmB,GACxBpC,KAAKN,QAAQuB,EAAQ6C,OAAOX,SAASiF,eAAetC,SAAS1D,CAA7D,IACJpC,KAAKN,QAAQuB,EAAQ6C,OAAOX,SAASiF,eAAe/C,KAAKjD,CAAzD,EACApC,KAAKN,QAAQuB,EAAQ6C,OAAOX,SAASC,gBAAgBiC,KAAKjD,CAA1D,GAEI6B,EAAa,IAAI7D,OAAOwG,MAAMyB,QAAQC,OAAOrH,EAASjB,KAAKF,aAAasC,EAA3D,GACNoE,MAAQ,EACnBvC,EAAWhB,QAAU,GACrBgB,EAAW9D,OAAOoB,KAAK,OAAQN,EAASgD,EAAY,CAApD,EAGD,C,+CAKsBhD,GACtB,GAAiE,EAA7DjB,KAAKN,QAAQuB,EAAQ6C,OAAOX,SAASiF,eAAelF,OAAY,4BAEnE,YAAsBlD,KAAKN,QAAQuB,EAAQ6C,OAAOX,SAASiF,eAA3D,+CAA2E,KAAlEhG,EAAkE,QAGtE6B,GAFJjE,KAAKN,QAAQuB,EAAQ6C,OAAOX,SAASI,iBAAmBnB,EAEvC,IAAIhC,OAAOwG,MAAMyB,QAAQC,OAAOrH,EAASjB,KAAKF,aAAasC,EAA3D,GACjB6B,EAAWuC,MAAQ,EACnBvC,EAAWhB,QAAU,GACrBgB,EAAW9D,OAAOoB,KAAK,KAAMN,EAASgD,EAAY,CAAlD,CAEA,CAVkE,8EAYnEjE,KAAKN,QAAQuB,EAAQ6C,OAAOX,SAASiF,eAAiB,EACtD,CACD,C,4CAKmB,2BAEnB,YAAwBpI,KAAKL,SAA7B,+CAAuC,KAA9BuB,EAA8B,QAOlCkB,GAJ2C,SAApCpC,KAAKN,QAAQwB,EAAY4C,QACnC9D,KAAKgE,UAAL,EAGe,IAkFhB,GA/EI9C,EAAYqH,UAAUC,EAAI,CAAC,IAC9BxI,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAUqG,GAAKC,KAAKC,IAAIzH,EAAYqH,UAAUC,CAA/B,EAC/CxI,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU6E,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAEtElG,EAAY2D,WACf7E,KAAK4I,qBAAqB1H,EAAa,IAAvC,EACAkB,EAAY,OAGqB,GAA1BlB,EAAYqH,UAAUC,GAC9BxI,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAUyG,KAAO3H,EAAYqH,UAAUC,EACvExI,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU6E,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAEtElG,EAAY2D,WACf7E,KAAK4I,qBAAqB1H,EAAa,MAAvC,EACAkB,EAAY,SAGkD,YAAvDpC,KAAKN,QAAQwB,EAAY4C,OAAOd,YAAYW,SAEpD3D,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAUqG,GAAKvH,EAAY4H,GAAK,EAAI,EACpE9I,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAUyG,KAAO3H,EAAY6H,KAAO,EAAI,GAGrE7H,EAAYqH,UAAU1C,EAAI,CAAC,IAC9B7F,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU4G,KAAON,KAAKC,IAAIzH,EAAYqH,UAAU1C,CAA/B,EACjD7F,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU6E,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAEtElG,EAAY2D,WACf7E,KAAK4I,qBAAqB1H,EAAa,MAAvC,EACAkB,EAAY,SAGqB,GAA1BlB,EAAYqH,UAAU1C,GAC9B7F,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU6G,MAAQ/H,EAAYqH,UAAU1C,EACxE7F,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU6E,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAEtElG,EAAY2D,WACf7E,KAAK4I,qBAAqB1H,EAAa,OAAvC,EACAkB,EAAY,UAGkD,YAAvDpC,KAAKN,QAAQwB,EAAY4C,OAAOd,YAAYW,SAEpD3D,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU4G,KAAO9H,EAAYgI,KAAO,EAAI,EACxElJ,KAAKN,QAAQwB,EAAY4C,OAAO1B,UAAU6G,MAAQ/H,EAAYiI,MAAQ,EAAI,GAGvEjI,EAAY2D,UAAyB,IAAbzC,GAC3BpC,KAAKoJ,uBAAuBlI,CAA5B,EAIGA,EAAYmI,WAAWb,EAAI,CAAC,IAC/BxI,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoB8F,GAAKC,KAAKC,IAAIzH,EAAYmI,WAAWb,CAAhC,EACzDxI,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBsE,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,KAEjD,GAA3BlG,EAAYmI,WAAWb,GAC/BxI,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBkG,KAAO3H,EAAYmI,WAAWb,EAClFxI,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBsE,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,MAGpFpH,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoB8F,GAAK,EACzDzI,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBkG,KAAO,GAGxD3H,EAAYmI,WAAWxD,EAAI,CAAC,IAC/B7F,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBqG,KAAON,KAAKC,IAAIzH,EAAYmI,WAAWxD,CAAhC,EAC3D7F,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBsE,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,KAEjD,GAA3BlG,EAAYmI,WAAWxD,GAC/B7F,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBsG,MAAQ/H,EAAYmI,WAAWxD,EACnF7F,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBsE,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,MAGpFpH,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBqG,KAAO,EAC3DhJ,KAAKN,QAAQwB,EAAY4C,OAAOnB,oBAAoBsG,MAAQ,GAGF,YAAvDjJ,KAAKN,QAAQwB,EAAY4C,OAAOd,YAAYW,OAE/C,IAAK,IAAI2F,EAAI,EAAGA,EAAIpI,EAAY4D,QAAQ5B,OAAQoG,CAACA,GAAI,CACpD,IAAI5D,EAASxE,EAAY4D,QAAQwE,GAI7BvB,GAHJ/H,KAAKN,QAAQwB,EAAY4C,OAAOgB,QAAQ,IAAMwE,GAAK5D,EAAOc,MAGvCxG,KAAKgI,gBAAgBhI,KAAKN,QAAQwB,EAAY4C,OAAQwF,CAAtD,GACS,SAAjBvB,IACV/H,KAAKN,QAAQwB,EAAY4C,OAAOW,eAAesD,GAAgBrC,EAAOc,MAEvE,CAEF,CAxGkB,8EAyGnB,C,oCAOWxE,EAASuH,GACpB,IAQOC,EARHxJ,KAAKN,QAAQwD,QAEZlB,EAAQyH,UADZF,EAAYA,GAAa,KAEpBG,EAAmB1J,KAAK2J,oBAAoB3H,EAAQ4H,MAAO,CAAxC,EAGQ,SAApB5J,KAAKN,QAAQ,KAAqD,cAA/BM,KAAKN,QAAQ,GAAGmK,SAAShE,IAClEgE,EAAW7J,KAAKN,QAAQ,GAAGmK,SAC3BL,EAAiBpJ,OAAOsI,KAAKoB,MAAMC,QAAQF,EAAShE,EAAGgE,EAASrB,EAAGxG,EAAQgI,OAAQhI,EAAQiI,MAA1E,EACrBP,EAAmB1J,KAAK2J,oBAAoBH,EAAgB,CAAzC,EACfU,EAAelF,OAAOhF,KAAKyC,oBAAoBiH,CAAzB,CAAP,EAEnB1J,KAAKN,QAAQ,GAAGsC,QAAQC,QAAUyH,EAClC1J,KAAKN,QAAQ,GAAGsC,QAAQG,MAAQqH,EAChCxJ,KAAKN,QAAQ,GAAGsC,QAAQE,gBAAkBgI,EAC1ClK,KAAKN,QAAQ,GAAGsC,QAAQiF,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAI3D,C,oCAOWpF,GACX,IACK+B,EADD/D,KAAKN,QAAQwD,SACZa,EAAS,GACb/D,KAAKN,QAAQ,GAAGsG,UAAU,SAA1B,EACIhE,EAAQmI,eAAR,IACHpG,EAAS,MAEN/B,EAAQoI,gBAAR,IACHrG,EAAS,MAEN/B,EAAQqI,iBAAR,IACHtG,EAAS,MAEN/B,EAAQsI,eAAR,IACHvG,EAAS,MAEN/B,EAAQuI,kBAAR,IACHxG,EAAS,MAGV/D,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,UAAW6C,MAAO,EAAG3C,OAAQ,EAAGE,OAAQA,EAAQ6D,MAAO,MAAjE,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,eAAgBwC,CAAjC,EAEA/D,KAAKN,QAAQ,GAAGsC,QAAQ+B,GAAU,EAGlC/D,KAAKN,QAAQ,GAAGsD,YAAYC,QAAQoC,KAAKtB,CAAzC,EACA/D,KAAKN,QAAQ,GAAGsD,YAAY6E,KAAO9D,EACnC/D,KAAKN,QAAQ,GAAGsD,YAAY8E,YAAc/D,EAC1C/D,KAAKN,QAAQ,GAAGsD,YAAYK,OAAOgC,KAAKtB,CAAxC,EACA/D,KAAKN,QAAQ,GAAGsC,QAAQiF,UAAYjF,EAAQwI,SAE7C,C,kCAOSxI,GACT,IACK+B,EADD/D,KAAKN,QAAQwD,SACZa,EAAS,GACT/B,EAAQyI,mBAAR,IACH1G,EAAS,MAEN/B,EAAQ0I,oBAAR,IACH3G,EAAS,MAEN/B,EAAQ2I,qBAAR,IACH5G,EAAS,MAEN/B,EAAQ4I,mBAAR,IACH7G,EAAS,MAEN/B,EAAQ6I,sBAAR,IACH9G,EAAS,MAGV/D,KAAKC,aAAasB,KAAK,cAAe,CAAEoC,OAAQ,UAAW6C,MAAO,EAAG3C,OAAQ,EAAGE,OAAQA,EAAQ6D,MAAO,IAAjE,CAAtC,EACA5H,KAAKG,OAAOoB,KAAK,aAAcwC,CAA/B,EAEA/D,KAAKN,QAAQ,GAAGsC,QAAQ+B,GAAU,EAClC/D,KAAKN,QAAQ,GAAGsD,YAAYQ,SAAS6B,KAAKtB,CAA1C,EACA/D,KAAKN,QAAQ,GAAGsD,YAAYiF,aAAelE,EAC3C/D,KAAKN,QAAQ,GAAGsC,QAAQiF,UAAYjH,KAAKR,MAAM0H,IAAIC,KAAKC,IAEzD,C,4CAQmBwC,EAAOkB,GAC1BA,EAAgBA,GAAiB,EAE7BC,EAAgB3K,OAAOsI,KAAKsC,IAAMF,EAElCG,EAAY7K,OAAOsI,KAAKwC,KAAKC,GAAGvB,EAAOmB,CAA3B,EACZK,EAAehL,OAAOsI,KAAK2C,SAASJ,CAArB,EAGnB,OAFmBjL,KAAKH,SAASuL,EAGjC,C,+CAOsBE,GACtB,IAAIC,EAAgB,CACnB,GAAM,EACN,KAAQ,EACR,KAAQ,EACR,MAAS,EACT,QAAWD,EAAQE,YAAR,CALQ,EAqBpB,OAbIF,EAAQE,YAAR,EAAsB1F,SAAS,GAA/B,IACHyF,EAAcvC,KAAO,GAElBsC,EAAQE,YAAR,EAAsB1F,SAAS,GAA/B,IACHyF,EAActC,MAAQ,GAEnBqC,EAAQE,YAAR,EAAsB1F,SAAS,GAA/B,IACHyF,EAAc1C,KAAO,GAElByC,EAAQE,YAAR,EAAsB1F,SAAS,GAA/B,IACHyF,EAAc9C,GAAK,GAGb8C,CACP,C,+CAOsBE,EAAYlC,GAElC,MAAIkC,GAAWhD,IAAQgD,EAAWzC,MAAQyC,EAAWxC,MAGjDwC,EAAWxC,OAASwC,EAAWhD,GAC3B,KAEJgD,GAAWxC,OAAWwC,EAAWhD,IAAMgD,EAAW5C,KAGlD4C,EAAWxC,OAASwC,EAAW5C,KAC3B,KAEJ4C,GAAW5C,MAAU4C,EAAWzC,MAAQyC,EAAWxC,MAGnDwC,EAAWzC,MAAQyC,EAAW5C,KAC1B,KAEJ4C,GAAWzC,MAAUyC,EAAWhD,IAAMgD,EAAW5C,KAGjD4C,EAAWzC,MAAQyC,EAAWhD,GAC1B,KAED,GALC,IANA,IANA,IANA,GAwBR,C,4CAMmB6C,GAAS,WAC5B,MAAe,IAAXA,EACInF,OAAOvG,KAAKI,KAAKH,QAAjB,EAA2B0G,KAAK,SAAAN,GAAA,OAAO,EAAKpG,SAASoG,KAASqF,CAA9B,CAAhC,EAGA,EAER,C,kCAGAtL,KAAK0L,SAAL,EACA1L,KAAKR,MAAQmM,MACb,C,gCAOA,IAAIC,GAGJA,EAHY,CACX,MAAS,EADE,GAGN5K,MAAMrB,SAAW,GAEvB,IAAK,IAAIkM,EAAI,EAAGA,EAAI7L,KAAKL,SAASuD,OAAQ2I,CAACA,GAAI,CAK9C,IAJA,IAAI3D,EAAMlI,KAAKL,SAASkM,GACpB/G,EAAU,GACVgH,EAAO,GAEFxC,EAAI,EAAGA,EAAIpB,EAAIpD,QAAQ5B,OAAQoG,CAACA,GAAI,CAC5C,IAAI5D,EAASwC,EAAIpD,QAAQwE,GACzBxE,EAAQ,IAAMY,EAAO5B,OAAS4B,EAAOc,KACrC,CAED,IAAK,IAAIuF,EAAI,EAAGA,EAAI7D,EAAI4D,KAAK5I,OAAQ6I,CAACA,GAAI,CACzC,IAAIC,EAAO9D,EAAI4D,KAAKC,GACpBD,EAAK,IAAME,EAAKlI,OAASkI,EAAKC,SAAL,CACzB,CAEDL,EAAM5K,MAAMrB,SAAS0F,KAAK,CACzB,GAAM6C,EAAItE,GACV,MAASsE,EAAIpE,MACb,QAAWgB,EACX,KAAQgH,CAJiB,CAA1B,CAMA,CA5BM,aA8BPF,EAAMlM,QAAU,IA9BT,aA+BP,YAAuBM,KAAKN,QAA5B,+CAAqC,OAA5BqC,EAA4B,QACpC6J,EAAMlM,QAAQ2F,MAAd,KACC,YAAetD,EAAWiB,YAC1B,mBAAsBjB,EAAWuB,mBAEjC,QAAWvB,EAAW+C,QACtB,eAAkB/C,EAAW0C,cAL9B,uBAMuB1C,EAAWuB,kBANlC,MAOC,UAAWvB,EAAWC,OAPvB,MAQC,YAAaD,EAAWK,SARzB,MASC,sBAAuBL,EAAWY,mBATnC,MAUC,OAAQZ,EAAWnC,IAVpB,KAYA,CA5CM,8EA8CP,OAAOgM,CACP,C,OA5/BuCxL,OAAO8L,QAAQC,W,YAAnC5M,C,+BCiCrBJ,EAAOD,QApCU,CACb,OAAQ,IACR,UAAW,MACX,SAAU,MACV,UAAW,OACX,OAAQ,KACR,UAAW,OACX,SAAU,MACV,UAAW,MACX,MAAO,IACP,SAAU,MACV,QAAS,MACT,SAAU,OACV,MAAO,KACP,SAAU,OACV,QAAS,MACT,SAAU,MACV,EAAK,IACL,MAAS,MACT,KAAQ,MACR,MAAS,OACT,GAAM,KACN,MAAS,OACT,KAAQ,MACR,MAAS,MACT,GAAM,IACN,OAAU,MACV,MAAS,MACT,OAAU,OACV,IAAO,KACP,OAAU,OACV,MAAS,MACT,OAAU,MACV,IAAO,GAjCM,C,oTCAjB,I,IAAA,I,MACA,I,MACA,I,MACA,I,qDAGI,a,KAAc,mB,wDACb,C,sCAEU0E,GACPA,EAAKA,EAAGO,YAAH,EACL,IAAIiI,EAAYC,UAehB,OAbIzI,EAAGkC,SAAS,MAAZ,GAAuBlC,EAAGkC,SAAS,MAAZ,EACvBsG,EAAYE,UAEP1I,EAAGkC,SAAS,MAAZ,GAAuBlC,EAAGkC,SAAS,KAAZ,EAC5BsG,EAAYG,UAEP3I,EAAGkC,SAAS,MAAZ,IACLsG,EAAYI,WAMTJ,CACV,C,0CAGG,MAAO,CACH,UAAa,CACT,GAAM,EACN,KAAQ,EACR,KAAQ,EACR,MAAS,EACT,QAAW,GACX,aAAgB,GAChB,QAAW,EACX,aAAgB,EAChB,UAAa,CATJ,EAWb,oBAAuB,CACnB,GAAM,EACN,KAAQ,EACR,KAAQ,EACR,MAAS,EACT,QAAW,GACX,QAAW,EACX,aAAgB,GAChB,aAAgB,EAChB,UAAa,CATM,EAWvB,QAAW,GACX,eAAkB,CACdK,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,EAjBQ,EAmBlB,QAAW,CACP,GAAM,EACN,GAAM,EACN,GAAM,EACN,GAAM,EACN,GAAM,EACN,QAAW,GACX,gBAAmB,EACnB,MAAS,EACT,UAAa,CATN,EAWX,SAAY,CAAC5H,EAAE,EAAE2C,EAAE,CAAP,EACZ,QAAW,GACX,KAAQ,CACJ,GAAM,GACN,KAAQ,GACR,KAAQ,GACR,MAAS,EAJL,EAMR,SAAY,CACR,eAAkB,GAClB,gBAAmB,GACnB,iBAAoB,EAHZ,EAKZ,YAAe,CACX,OAAU,GACV,QAAW,GACX,SAAY,GACZ,KAAQ,GACR,YAAe,GACf,aAAgB,GAChB,OAAU,EAPC,EASf,mBAAsB,CAClB,QAAW,GACX,SAAY,GACZ,KAAQ,GACR,YAAe,GACf,aAAgB,GAChB,YAAe,EANG,EAQtB,eAAkB,CACdiE,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRW,KAAM,EACNV,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,CAjBQ,CApFf,CAwGV,C,sCAUazI,GACVA,EAAkBA,GAAmB,GAKrC,IAHA,IAAI2I,EAAW1N,KAAK2N,gBAAL,EAGN9B,EAAI,EAAGA,GAAK9G,EAAiB8G,CAACA,GACnC6B,EAAS5I,QAAQ,IAAM+G,GAAK,EAC5B6B,EAAS9N,KAAK,IAAMiM,GAAK,GAS7B,OANA6B,EAASE,YAAc,SAAS/H,EAAE2C,GAC9BxI,KAAK6J,SAAShE,EAAIA,EAClB7F,KAAK6J,SAASrB,EAAIA,CACrB,EAGMkF,CACV,C,8CC/JLvO,EAAOD,QAAU,CACb2O,MAAO,UACPrJ,QAAS,UACTF,eAAgB,CACZmI,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,EAhBM,CAHH,C,+BCAjBrO,EAAOD,QAAU,CACb2O,MAAO,YACPrJ,QAAS,OACTF,eAAiB,CACbmI,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,GAAI,EACJC,GAAI,EACJK,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,EAZO,CAHJ,C,+BCAjBrO,EAAOD,QAAU,CACb2O,MAAO,gDACPrJ,QAAS,OACTF,eAAgB,CACZmI,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,EAjBM,CAHH,C,+BCAjBtO,EAAOD,QAAU,CACb2O,MAAO,YACPrJ,QAAS,OACTF,eAAgB,CACZmI,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNK,MAAO,EAlBK,CAHH,C,GCFXC,EAAmB,GA4BvBC,EAAoBC,EAAIC,EAGxBF,EAAoBG,EAAIJ,EAGxBC,EAAoBI,EAAI,SAASlP,EAASmP,EAAMC,GAC3CN,EAAoBO,EAAErP,EAASmP,CAAI,GACtClI,OAAOqI,eAAetP,EAASmP,EAAM,CAAEI,WAAY,GAAMC,IAAKJ,CAAO,CAAC,CAExE,EAGAN,EAAoBW,EAAI,SAASzP,GACX,aAAlB,OAAO0P,QAA0BA,OAAOC,aAC1C1I,OAAOqI,eAAetP,EAAS0P,OAAOC,YAAa,CAAErI,MAAO,QAAS,CAAC,EAEvEL,OAAOqI,eAAetP,EAAS,aAAc,CAAEsH,MAAO,EAAK,CAAC,CAC7D,EAOAwH,EAAoBc,EAAI,SAAStI,EAAOuI,GAEvC,GADU,EAAPA,IAAUvI,EAAQwH,EAAoBxH,CAAK,GACpC,EAAPuI,EAAU,OAAOvI,EACpB,GAAW,EAAPuI,GAA8B,UAAjB,OAAOvI,GAAsBA,GAASA,EAAMwI,WAAY,OAAOxI,EAChF,IAAIyI,EAAK9I,OAAO+I,OAAO,IAAI,EAG3B,GAFAlB,EAAoBW,EAAEM,CAAE,EACxB9I,OAAOqI,eAAeS,EAAI,UAAW,CAAER,WAAY,GAAMjI,MAAOA,CAAM,CAAC,EAC7D,EAAPuI,GAA4B,UAAhB,OAAOvI,EAAmB,IAAI,IAAIP,KAAOO,EAAOwH,EAAoBI,EAAEa,EAAIhJ,EAAK,SAASA,GAAO,OAAOO,EAAMP,EAAM,EAAEkJ,KAAK,KAAMlJ,CAAG,CAAC,EAClJ,OAAOgJ,CACR,EAGAjB,EAAoBoB,EAAI,SAASjQ,GAChC,IAAImP,EAASnP,GAAUA,EAAO6P,WAC7B,WAAwB,OAAO7P,EAAgB,OAAG,EAClD,WAA8B,OAAOA,CAAQ,EAE9C,OADA6O,EAAoBI,EAAEE,EAAQ,IAAKA,CAAM,EAClCA,CACR,EAGAN,EAAoBO,EAAI,SAASc,EAAQC,GAAY,OAAOnJ,OAAOoJ,UAAUC,eAAeC,KAAKJ,EAAQC,CAAQ,CAAG,EAGpHtB,EAAoB0B,EAAI,GAIjB1B,EAAoBA,EAAoB2B,EAAI,CAAC,EA9EpD,SAAS3B,EAAoB4B,GAG5B,IAIIzQ,EAJJ,OAAG4O,EAAiB6B,KAIhBzQ,EAAS4O,EAAiB6B,GAAY,CACzC/D,EAAG+D,EACHC,EAAG,GACH3Q,QAAS,EACV,EAGAgP,EAAQ0B,GAAUH,KAAKtQ,EAAOD,QAASC,EAAQA,EAAOD,QAAS8O,CAAmB,EAGlF7O,EAAO0Q,EAAI,GAGJ1Q,IAhB4BD,OAiBpC,C,MAxBI6O,C","file":"MergedInput.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(window, function() {\nreturn ","import bearings from './configs/bearings'\r\nimport controlManager from './controlManager'\r\n\r\nexport default class MergedInput extends Phaser.Plugins.ScenePlugin {\r\n\r\n\t/**\r\n\t * The Merged Input plugin is designed to run in the background and handle input.\r\n\t * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\r\n\t *\r\n\t * @extends Phaser.Plugins.ScenePlugin\r\n\t * @param {*} scene\r\n\t * @param {*} pluginManager\r\n\t */\r\n\tconstructor(scene, pluginManager) {\r\n\t\tsuper(scene, pluginManager);\r\n\t\tthis.scene = scene;\r\n\r\n\t\t// Players\r\n\t\tthis.players = [];\r\n\t\t// Gamepads\r\n\t\tthis.gamepads = [];\r\n\t\t// Keys object to store Phaser key objects. We'll check these during update\r\n\t\tthis.keys = {};\r\n\r\n\t\tthis.bearings = bearings;\r\n\r\n\t\tthis.dpadMappings = {\r\n\t\t\t'UP': 12,\r\n\t\t\t'DOWN': 13,\r\n\t\t\t'LEFT': 14,\r\n\t\t\t'RIGHT': 15\r\n\t\t}\r\n\r\n\t\tthis.controlManager = new controlManager()\r\n\t}\r\n\r\n\tboot() {\r\n\t\t// Scene event emitter\r\n\t\tthis.eventEmitter = this.systems.events;\r\n\t\t// Plugin event emitter\r\n\t\tthis.events = new Phaser.Events.EventEmitter();\r\n\r\n\t\tthis.game.events.on(Phaser.Core.Events.PRE_STEP, this.preupdate, this);\r\n\t\tthis.game.events.on(Phaser.Core.Events.POST_STEP, this.postupdate, this);\r\n\t\t// Handle the game losing focus\r\n\t\tthis.game.events.on(Phaser.Core.Events.BLUR, () => {\r\n\t\t\tthis.loseFocus()\r\n\t\t})\r\n\r\n\t\t// Gamepad\r\n\t\tif (typeof this.systems.input.gamepad !== 'undefined') {\r\n\t\t\tthis.systems.input.gamepad.on('connected', function (thisGamepad) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tthis.setupGamepad(thisGamepad)\r\n\t\t\t}, this);\r\n\r\n\t\t\t// Check to see if the gamepad has already been setup by the browser\r\n\t\t\tthis.systems.input.gamepad.refreshPads();\r\n\t\t\tif (this.systems.input.gamepad.total) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tfor (const thisGamepad of this.gamepads) {\r\n\t\t\t\t\tthis.systems.input.gamepad.emit('connected', thisGamepad);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.systems.input.gamepad.on('down', this.gamepadButtonDown, this);\r\n\t\t\tthis.systems.input.gamepad.on('up', this.gamepadButtonUp, this);\r\n\t\t}\r\n\r\n\t\t// Keyboard\r\n\t\tthis.systems.input.keyboard.on('keydown', this.keyboardKeyDown, this);\r\n\t\tthis.systems.input.keyboard.on('keyup', this.keyboardKeyUp, this);\r\n\r\n\r\n\t\t// Pointer\r\n\t\tthis.systems.input.mouse.disableContextMenu();\r\n\t}\r\n\r\n\tpreupdate() {\r\n\t\t// Loop through players and handle input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// If the pointer hasn't moved, and the scene has changed, this can end up as undefined\r\n\t\t\tthisPlayer.pointer.BEARING = typeof thisPlayer.pointer.BEARING != 'undefined' ? thisPlayer.pointer.BEARING : '';\r\n\t\t\tthisPlayer.pointer.BEARING_DEGREES = typeof thisPlayer.pointer.BEARING_DEGREES != 'undefined' ? thisPlayer.pointer.BEARING_DEGREES : 0;\r\n\t\t\tthisPlayer.pointer.ANGLE = typeof thisPlayer.pointer.ANGLE != 'undefined' ? thisPlayer.pointer.ANGLE : '';\r\n\r\n\r\n\t\t\tthisPlayer.direction.BEARING = this.mapDirectionsToBearing(thisPlayer.direction);\r\n\t\t\tthisPlayer.direction.BEARING_LAST = thisPlayer.direction.BEARING != '' ? thisPlayer.direction.BEARING : thisPlayer.direction.BEARING_LAST;\r\n\t\t\tthisPlayer.direction.DEGREES = thisPlayer.direction.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction.DEGREES_LAST = thisPlayer.direction.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING_LAST)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.BEARING = this.mapDirectionsToBearing(thisPlayer.direction_secondary);\r\n\t\t\tthisPlayer.direction_secondary.BEARING_LAST = thisPlayer.direction_secondary.BEARING != '' ? thisPlayer.direction_secondary.BEARING : thisPlayer.direction_secondary.BEARING_LAST;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES = thisPlayer.direction_secondary.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES_LAST = thisPlayer.direction_secondary.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING_LAST)) : 0;\r\n\t\t}\r\n\r\n\t\tthis.checkKeyboardInput();\r\n\t\tthis.checkGamepadInput();\r\n\t\tthis.checkPointerInput();\r\n\t}\r\n\r\n\tpostupdate() {\r\n\t\t// Loop through players and manage buffered input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Clear the interaction buffer\r\n\t\t\tthis.clearBuffer(thisPlayer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the interaction buffer for the given player\r\n\t * In the case of 'fake' DPad presses, we're using some convoluted buffers to keep the 'pressed' and 'released' values around for an extra tick\r\n\t * As they're created in this update loop, they're otherwise cleared before the consumer can use them.\r\n\t * @param {*} thisPlayer \r\n\t */\r\n\tclearBuffer(thisPlayer) {\r\n\t\tif (thisPlayer.interaction.pressed.length > 0 && thisPlayer.internal.fakedpadPressed.length == 0) {\r\n\t\t\tthisPlayer.interaction.buffer = [];\r\n\t\t}\r\n\t\tif (thisPlayer.interaction.buffer.length == 0) {\r\n\t\t\tthisPlayer.interaction.pressed = [];\r\n\t\t\tthisPlayer.interaction_mapped.pressed = [];\r\n\t\t\tif (thisPlayer.internal.fakedpadReleased.length == 0) {\r\n\t\t\t\tthisPlayer.interaction.released = [];\r\n\t\t\t\tthisPlayer.interaction_mapped.released = [];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthisPlayer.internal.fakedpadPressed = [];\r\n\t\tthisPlayer.internal.fakedpadReleased = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Function to run when the game loses focus\r\n\t * We want to fake releasing the buttons here, so that they're not stuck down without an off event when focus returns to the game\r\n\t */\r\n\tloseFocus() {\r\n\t\t// Loop through defined keys and reset them\r\n\t\tfor (let thisKey in this.keys) {\r\n\t\t\tthis.keys[thisKey].reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up the gamepad and associate with a player object\r\n\t */\r\n\tsetupGamepad(thisGamepad) {\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', id: thisGamepad.id, player: thisGamepad.index, action: 'Connected' });\r\n\t\tthis.events.emit('gamepad_connected', thisGamepad)\r\n\r\n\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\t\t\r\n\t\tlet gamepadID = thisGamepad.id.toLowerCase();\r\n\t\tthis.players[thisGamepad.index].gamepad = thisGamepad;\r\n\r\n\t\t// Map the gamepad buttons\r\n\t\tlet mappedPad = this.controlManager.mapGamepad(gamepadID);\r\n\t\tthis.players[thisGamepad.index].gamepadMapping = mappedPad.gamepadMapping;\r\n\t\tthis.players[thisGamepad.index].interaction_mapped.gamepadType = mappedPad.padType;\r\n\t\tfor (let thisButton in this.players[thisGamepad.index].gamepadMapping) {\r\n\t\t\tthis.players[thisGamepad.index].buttons_mapped[thisButton] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trefreshGamepads() {\r\n\t\t// Sometimes, gamepads are undefined. For some reason.\r\n\t\tthis.gamepads = this.systems.input.gamepad.gamepads.filter(function (el) {\r\n\t\t\treturn el != null;\r\n\t\t});\r\n\r\n\t\tfor (const [index, thisGamepad] of this.gamepads.entries()) {\r\n\t\t\tthisGamepad.index = index; // Overwrite the gamepad index, in case we had undefined gamepads earlier\r\n\r\n\t\t\t/**\r\n\t\t\t * Some cheap gamepads use the first axis as a dpad, in which case we won't have the dpad buttons 12-15\r\n\t\t\t */\r\n\t\t\tthisGamepad.fakedpad = thisGamepad.buttons.length < 15;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a new player object to the players array\r\n\t * @param {number} index Player index - if a player object at this index already exists, it will be returned instead of creating a new player object\r\n\t * @param {number} numberOfButtons The number of buttons to assign to the player object. Defaults to 16. Fewer than 16 is not recommended, as gamepad DPads typically map to buttons 12-15\r\n\t */\r\n\taddPlayer(index, numberOfButtons) {\r\n\t\tnumberOfButtons = numberOfButtons || 16;\r\n\t\tif (typeof Number.isInteger(index) && typeof this.players[index] !== 'undefined') {\r\n\t\t\treturn this.players[index];\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Set up player object\r\n\t\t\tlet newPlayer = this.controlManager.setupControls(numberOfButtons);\r\n\r\n\t\t\t// Add helper functions to the player object\r\n\t\t\tthis.addPlayerHelperFunctions(newPlayer);\r\n\r\n\t\t\t// Push new player to players array\r\n\t\t\tthis.players.push(newPlayer);\r\n\r\n\t\t\tthis.players[this.players.length - 1].index = this.players.length - 1;\r\n\r\n\t\t\t// If this is the first player, add the pointer events\r\n\t\t\tif (this.players.length == 1) {\r\n\t\t\t\tthis.systems.input.on('pointermove', function (pointer) {\r\n\t\t\t\t\tthis.pointerMove(pointer);\r\n\t\t\t\t}, this);\r\n\t\r\n\t\t\t\tthis.systems.input.on('pointerdown', function (pointer) {\r\n\t\t\t\t\tthis.pointerDown(pointer);\r\n\t\t\t\t}, this);\r\n\t\r\n\t\t\t\tthis.systems.input.on('pointerup', function (pointer) {\r\n\t\t\t\t\tthis.pointerUp(pointer);\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.players[this.players.length - 1];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add helper functions to the player object\r\n\t * @param {*} player \r\n\t */\r\n\taddPlayerHelperFunctions(player) {\r\n\t\t/**\r\n\t\t * Pass a button name, or an array of button names to check if any were pressed in this update step.\r\n\t\t * Returns the name of the matched button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction.isPressed = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction.pressed.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * Pass a button name, or an array of button names to check if any were released in this update step.\r\n\t\t * Returns the name of the matched button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction.isReleased = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction.released.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pass a mapped button name, or an array of mapped button names to check if any were pressed in this update step.\r\n\t\t * Returns the name of the matched mapped button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction_mapped.isPressed = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction_mapped.pressed.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Pass a mapped button name, or an array of mapped button names to check if any were released in this update step.\r\n\t\t * Returns the name of the matched mapped button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction_mapped.isReleased = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction_mapped.released.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t}\r\n\r\n\t\tplayer.setDevice = (device) => {\r\n\t\t\tif (player.interaction.device != device) {\r\n\t\t\t\tthis.eventEmitter.emit('mergedInput', { device: device, player: player.index, action: 'Device Changed' });\r\n\t\t\t\tthis.events.emit('device_changed', { player: player.index, device: device });\r\n\t\t\t}\r\n\t\t\tplayer.interaction.device = device;\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Get player object\r\n\t * @param {number} index Player index\r\n\t */\r\n\tgetPlayer(index) {\r\n\t\treturn typeof this.players[index] !== 'undefined' ? this.players[index] : ''\r\n\t}\r\n\r\n\tgetPlayerIndexFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\treturn thisPlayer.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tgetPlayerButtonFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\t// Now we have a matching button value, check to see if it's in our mapped buttons, in which case we want to return the button number it matches to\r\n\t\t\t\t\t\tif (typeof thisPlayer.gamepadMapping[thisKey] !== \"undefined\") {\r\n\t\t\t\t\t\t\treturn 'B' + thisPlayer.gamepadMapping[thisKey];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn thisKey;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Return an array of actions that a player may use\r\n\t * @param {number} player \r\n\t * @returns \r\n\t */\r\n\tgetPlayerActions(player) {\r\n\t\tlet actions = ['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'];\r\n\t\tactions.push(...Object.keys(this.players[player].gamepadMapping));\r\n\t\tactions.push(...Object.keys(this.players[player].buttons));\r\n\r\n\t\treturn actions;\r\n\t}\r\n\r\n\t/**\r\n\t * Given a player and a button ID, return the mapped button name, e.g. 0 = 'RC_S' (Right cluster, South - X on an xbox gamepad)\r\n\t * @param {*} player \r\n\t * @param {*} buttonID \r\n\t */\r\n\tgetMappedButton(player, buttonID) {\r\n\t\tbuttonID = buttonID.toString().replace(/\\D/g, '');\r\n\t\treturn Object.keys(player.gamepadMapping).find(key => player.gamepadMapping[key] == buttonID);\r\n\t}\r\n\r\n\t// Keyboard functions\r\n\r\n\t/**\r\n\t * Define a key for a player/action combination\r\n\t * @param {number} player The player on which we're defining a key\r\n\t * @param {string} action The action to define\r\n\t * @param {string} value The key to use\r\n\t * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\r\n\t */\r\n\tdefineKey(player = 0, action, value, append = false) {\r\n\t\t// Set up a new player if none defined\r\n\t\tif (typeof this.players[player] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\r\n\t\tif (this.getPlayerActions(player).includes(action)) {\r\n\t\t\tif (append && (typeof this.players[player].keys[action] !== 'undefined')) {\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[player].keys[action] = [];\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined keys\r\n\t */\r\n\tcheckKeyboardInput() {\r\n\t\t// Loop through players and check for keypresses\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tlet action = 0;\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\t// Check if the key is down\r\n\t\t\t\t\taction = (this.keys[thisValue].isDown) ? 1 : action;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the action in the player object\r\n\r\n\t\t\t\t// Dpad\r\n\t\t\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction[thisKey] = action;\r\n\t\t\t\t\tthisPlayer.direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t}\r\n\t\t\t\t// Alternative direction\r\n\t\t\t\telse if (['ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction_secondary[thisKey.replace('ALT_', '')] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Friendly button names\r\n\t\t\t\telse if (thisKey in thisPlayer.gamepadMapping) {\r\n\t\t\t\t\t// Get the button number from the gamepad mapping\r\n\t\t\t\t\tthisPlayer.buttons['B' + thisPlayer.gamepadMapping[thisKey]] = action;\r\n\t\t\t\t\tthisPlayer.buttons_mapped[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Numbered buttons\r\n\t\t\t\telse {\r\n\t\t\t\t\tthisPlayer.buttons[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the latest interaction flag\r\n\t\t\t\tif (action == 1) {\r\n\t\t\t\t\tthisPlayer.setDevice('keyboard');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyDown(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\t\t\tthis.events.emit('keyboard_keydown', { player: playerIndex, key: keyCode });\r\n\r\n\t\t\tthisPlayer.setDevice('keyboard');\r\n\t\t\tthisPlayer.interaction.pressed.push(playerAction);\r\n\t\t\tthisPlayer.interaction.buffer.push(playerAction);\r\n\t\t\tthisPlayer.interaction.last = playerAction;\r\n\t\t\tthisPlayer.interaction.lastPressed = playerAction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 1;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.pressed.push(mappedButton);\r\n\t\t\t\t\tthisPlayer.interaction_mapped.last = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyUp(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\t\t\tthis.events.emit('keyboard_keyup', { player: playerIndex, key: keyCode });\r\n\r\n\t\t\tthisPlayer.setDevice('keyboard');\r\n\t\t\tthisPlayer.interaction.released.push(playerAction);\r\n\t\t\tthisPlayer.interaction.lastReleased = playerAction;\r\n\t\t\t\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 0;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.released = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined pointer buttons\r\n\t */\r\n\tcheckPointerInput() {\r\n\t\t// Loop through players and check for button presses\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) { // Each definition for this key action\r\n\t\t\t\t\tif (['M1', 'M2', 'M3', 'M4', 'M5'].includes(thisValue[0])) {\r\n\t\t\t\t\t\t// Check to see if button is pressed (stored in P1, can't have two mice...)\r\n\t\t\t\t\t\tif (this.players[0].pointer[thisValue] == 1) {\r\n\t\t\t\t\t\t\tthisPlayer.buttons[thisKey] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Gamepad functions\r\n\r\n\t/**\r\n\t * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonDown(pad, button, value) {\r\n\t\tthis.players[pad.index].setDevice('gamepad');\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'DOWN' });\r\n\t\tthis.events.emit('gamepad_buttondown', { player: pad.index, button: `B${button.index}` });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.pressed.push('B' + button.index);\r\n\t\t\tthis.players[pad.index].interaction.last = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.buffer.push('B' + button.index);\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed.push(mappedButton);\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'DOWN' });\r\n\t\t\tthis.events.emit('gamepad_directiondown', { player: pad.index, button: direction });\r\n\r\n\t\t\tthis.players[pad.index].interaction.pressed.push(direction);\r\n\t\t\tthis.players[pad.index].interaction.last = direction;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = direction;\r\n\t\t\tthis.players[pad.index].interaction.buffer.push(direction);\r\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed.push(mappedButton);\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonUp(pad, button, value) {\r\n\t\tthis.players[pad.index].setDevice('gamepad');\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'UP' });\r\n\t\tthis.events.emit('gamepad_buttonup', { player: pad.index, button: `B${button.index}` });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.released.push('B' + button.index);\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'B' + button.index;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'UP' });\r\n\t\t\tthis.events.emit('gamepad_directionup', { player: pad.index, button: direction });\r\n\r\n\t\t\tthis.players[pad.index].interaction.released.push(direction);\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = direction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Some gamepads map dpads to axis, which are handled differently to buttons.\r\n\t * This function mimics a gamepad push and fires an event.\r\n\t * We also insert the direction into a buffer so that we know what buttons are pressed in the gamepadFakeDPadRelease function\r\n\t * We use an array for the buffer and pressed vars, as more than one button may be pressed at the same time, within the same step.\r\n\t */\r\n\tgamepadFakeDPadPress(gamepad, direction) {\r\n\t\tif (!this.players[gamepad.index].internal.fakedpadBuffer.includes(direction)) {\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer.push(direction);\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadPressed.push(direction);\r\n\t\t\t\r\n\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\tthisButton.value = 1;\r\n\t\t\tthisButton.pressed = true;\r\n\t\t\tthisButton.events.emit('down', gamepad, thisButton, 1)\r\n\t\t\t// this.systems.input.gamepad.emit('down', gamepad, thisButton, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When the axis is blank, we know we've released all buttons.\r\n\t */\r\n\tgamepadFakeDPadRelease(gamepad) {\r\n\t\tif (this.players[gamepad.index].internal.fakedpadBuffer.length > 0) {\r\n\r\n\t\t\tfor (let direction of this.players[gamepad.index].internal.fakedpadBuffer) {\r\n\t\t\t\tthis.players[gamepad.index].internal.fakedpadReleased = direction;\r\n\t\r\n\t\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\t\tthisButton.value = 0;\r\n\t\t\t\tthisButton.pressed = false;\r\n\t\t\t\tthisButton.events.emit('up', gamepad, thisButton, 0)\r\n\t\t\t\t// this.systems.input.gamepad.emit('up', gamepad, thisButton, 0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer = [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through gamepads and handle interactions\r\n\t */\r\n\tcheckGamepadInput() {\r\n\t\t// Check for gamepad input\r\n\t\tfor (var thisGamepad of this.gamepads) {\r\n\r\n\t\t\t// Set up a player if we don't have one, presumably due to race conditions in detecting gamepads\r\n\t\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\t\tthis.addPlayer();\r\n\t\t\t}\r\n\r\n\t\t\tlet direction = '';\r\n\r\n\t\t\t// Directions\r\n\t\t\tif (thisGamepad.leftStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'UP');\r\n\t\t\t\t\tdirection = 'UP'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'DOWN');\r\n\t\t\t\t\tdirection = 'DOWN'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.leftStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'LEFT');\r\n\t\t\t\t\tdirection = 'LEFT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'RIGHT');\r\n\t\t\t\t\tdirection = 'RIGHT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.fakedpad && direction == '') {\r\n\t\t\t\tthis.gamepadFakeDPadRelease(thisGamepad);\r\n\t\t\t}\r\n\r\n\t\t\t// Secondary\r\n\t\t\tif (thisGamepad.rightStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = Math.abs(thisGamepad.rightStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = thisGamepad.rightStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.rightStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = Math.abs(thisGamepad.rightStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = thisGamepad.rightStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// Buttons\r\n\t\t\t\tfor (var b = 0; b < thisGamepad.buttons.length; b++) {\r\n\t\t\t\t\tlet button = thisGamepad.buttons[b];\r\n\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + b] = button.value;\r\n\r\n\t\t\t\t\t// Get mapped name for this button number and artificially update the relevant buttons_mapped key\r\n\t\t\t\t\tlet mappedButton = this.getMappedButton(this.players[thisGamepad.index], b);\r\n\t\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[mappedButton] = button.value;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer move.\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerMove(pointer, threshold) {\r\n\t\tif (this.players.length) {\r\n\t\t\tthreshold = threshold || 0;\r\n\t\t\tif (pointer.distance > threshold) {\r\n\t\t\t\tlet pointerDirection = this.getBearingFromAngle(pointer.angle, 8);\r\n\r\n\t\t\t\t// If we've been given a player position, return bearings and angles\r\n\t\t\t\tif (typeof this.players[0] !== 'undefined' && this.players[0].position.x !== 'undefined') {\r\n\t\t\t\t\tlet position = this.players[0].position;\r\n\t\t\t\t\tlet angleToPointer = Phaser.Math.Angle.Between(position.x, position.y, pointer.worldX, pointer.worldY);\r\n\t\t\t\t\tpointerDirection = this.getBearingFromAngle(angleToPointer, 8);\r\n\t\t\t\t\tlet pointerAngle = Number(this.mapBearingToDegrees(pointerDirection));\r\n\r\n\t\t\t\t\tthis.players[0].pointer.BEARING = pointerDirection;\r\n\t\t\t\t\tthis.players[0].pointer.ANGLE = angleToPointer;\r\n\t\t\t\t\tthis.players[0].pointer.BEARING_DEGREES = pointerAngle;\r\n\t\t\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer down. Indicates that Mx has been pressed, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerDown(pointer) {\r\n\t\tif (this.players.length) {\r\n\t\t\tlet action = '';\r\n\t\t\tthis.players[0].setDevice('pointer');\r\n\t\t\tif (pointer.leftButtonDown()) {\r\n\t\t\t\taction = 'M1';\r\n\t\t\t}\r\n\t\t\tif (pointer.rightButtonDown()) {\r\n\t\t\t\taction = 'M2';\r\n\t\t\t}\r\n\t\t\tif (pointer.middleButtonDown()) {\r\n\t\t\t\taction = 'M3';\r\n\t\t\t}\r\n\t\t\tif (pointer.backButtonDown()) {\r\n\t\t\t\taction = 'M4';\r\n\t\t\t}\r\n\t\t\tif (pointer.forwardButtonDown()) {\r\n\t\t\t\taction = 'M5';\r\n\t\t\t}\r\n\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'DOWN' });\r\n\t\t\tthis.events.emit('pointer_down', action);\r\n\r\n\t\t\tthis.players[0].pointer[action] = 1;\r\n\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[0].interaction.pressed.push(action);\r\n\t\t\tthis.players[0].interaction.last = action;\r\n\t\t\tthis.players[0].interaction.lastPressed = action;\r\n\t\t\tthis.players[0].interaction.buffer.push(action);\r\n\t\t\tthis.players[0].pointer.TIMESTAMP = pointer.moveTime;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer up. Indicates that Mx has been released, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerUp(pointer) {\r\n\t\tif (this.players.length) {\r\n\t\t\tlet action = '';\r\n\t\t\tif (pointer.leftButtonReleased()) {\r\n\t\t\t\taction = 'M1';\r\n\t\t\t}\r\n\t\t\tif (pointer.rightButtonReleased()) {\r\n\t\t\t\taction = 'M2';\r\n\t\t\t}\r\n\t\t\tif (pointer.middleButtonReleased()) {\r\n\t\t\t\taction = 'M3';\r\n\t\t\t}\r\n\t\t\tif (pointer.backButtonReleased()) {\r\n\t\t\t\taction = 'M4';\r\n\t\t\t}\r\n\t\t\tif (pointer.forwardButtonReleased()) {\r\n\t\t\t\taction = 'M5';\r\n\t\t\t}\r\n\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'UP' });\r\n\t\t\tthis.events.emit('pointer_up', action);\r\n\r\n\t\t\tthis.players[0].pointer[action] = 0;\r\n\t\t\tthis.players[0].interaction.released.push(action);\r\n\t\t\tthis.players[0].interaction.lastReleased = action;\r\n\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get the bearing from a given angle\r\n\t * @param {float} angle - Angle to use\r\n\t * @param {number} numDirections - Number of possible directions (e.g. 4 for N/S/E/W)\r\n\t */\r\n\tgetBearingFromAngle(angle, numDirections) {\r\n\t\tnumDirections = numDirections || 8;\r\n\r\n\t\tvar snap_interval = Phaser.Math.PI2 / numDirections;\r\n\r\n\t\tvar angleSnap = Phaser.Math.Snap.To(angle, snap_interval);\r\n\t\tvar angleSnapDeg = Phaser.Math.RadToDeg(angleSnap);\r\n\t\tvar angleSnapDir = this.bearings[angleSnapDeg];\r\n\r\n\t\treturn angleSnapDir;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a bearing, return a direction object containing boolean flags for the four directions\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDirections(bearing) {\r\n\t\tlet thisDirection = {\r\n\t\t\t'UP': 0,\r\n\t\t\t'DOWN': 0,\r\n\t\t\t'LEFT': 0,\r\n\t\t\t'RIGHT': 0,\r\n\t\t\t'BEARING': bearing.toUpperCase()\r\n\t\t}\r\n\r\n\t\tif (bearing.toUpperCase().includes('W')) {\r\n\t\t\tthisDirection.LEFT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('E')) {\r\n\t\t\tthisDirection.RIGHT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('S')) {\r\n\t\t\tthisDirection.DOWN = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('N')) {\r\n\t\t\tthisDirection.UP = 1;\r\n\t\t}\r\n\r\n\t\treturn thisDirection;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a directions object, return the applicable bearing (8 way only)\r\n\t * @param {*} directions\r\n\t */\r\n\tmapDirectionsToBearing(directions, threshold) {\r\n\t\tvar threshold = threshold || -.5\r\n\t\tif (directions.UP && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'N';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.UP) {\r\n\t\t\treturn 'NE';\r\n\t\t}\r\n\t\tif (directions.RIGHT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'E';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.DOWN) {\r\n\t\t\treturn 'SE';\r\n\t\t}\r\n\t\tif (directions.DOWN && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'S';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.DOWN) {\r\n\t\t\treturn 'SW';\r\n\t\t}\r\n\t\tif (directions.LEFT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'W';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.UP) {\r\n\t\t\treturn 'NW';\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\t/**\r\n\t * Given a bearing, return the snapped angle in degrees\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDegrees(bearing) {\r\n\t\tif (bearing != '') {\r\n\t\t\treturn Object.keys(this.bearings).find(key => this.bearings[key] === bearing);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.shutdown();\r\n\t\tthis.scene = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Return debug object\r\n\t */\r\n\tdebug() {\r\n\t\t// Debug variables\r\n\t\tvar debug = {\r\n\t\t\t'input': {}\r\n\t\t};\r\n\t\tdebug.input.gamepads = [];\r\n\t\t\r\n\t\tfor (var i = 0; i < this.gamepads.length; i++) {\r\n\t\t\tlet pad = this.gamepads[i];\r\n\t\t\tlet buttons = {};\r\n\t\t\tlet axes = {};\r\n\r\n\t\t\tfor (var b = 0; b < pad.buttons.length; b++) {\r\n\t\t\t\tlet button = pad.buttons[b];\r\n\t\t\t\tbuttons['B' + button.index] = button.value;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var a = 0; a < pad.axes.length; a++) {\r\n\t\t\t\tlet axis = pad.axes[a];\r\n\t\t\t\taxes['A' + axis.index] = axis.getValue();\r\n\t\t\t}\r\n\r\n\t\t\tdebug.input.gamepads.push({\r\n\t\t\t\t'ID': pad.id,\r\n\t\t\t\t'Index': pad.index,\r\n\t\t\t\t'Buttons': buttons,\r\n\t\t\t\t'Axes': axes\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tdebug.players = [];\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\tdebug.players.push({\r\n\t\t\t\t'interaction': thisPlayer.interaction,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n//\t\t\t\t'device': thisPlayer.interaction.device,\r\n\t\t\t\t'buttons': thisPlayer.buttons,\r\n\t\t\t\t'buttons_mapped': thisPlayer.buttons_mapped,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n\t\t\t\t'pointer': thisPlayer.pointer,\r\n\t\t\t\t'direction': thisPlayer.direction,\r\n\t\t\t\t'direction_secondary': thisPlayer.direction_secondary,\r\n\t\t\t\t'keys': thisPlayer.keys\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n}\r\n","const bearings = {\r\n    '-180': 'W',\r\n    '-168.75': 'WBN',\r\n    '-157.5': 'WNW',\r\n    '-146.25': 'NWBW',\r\n    '-135': 'NW',\r\n    '-123.75': 'NWBN',\r\n    '-112.5': 'NNW',\r\n    '-101.25': 'NBW',\r\n    '-90': 'N',\r\n    '-78.75': 'NBE',\r\n    '-67.5': 'NNE',\r\n    '-56.25': 'NEBN',\r\n    '-45': 'NE',\r\n    '-33.75': 'NEBE',\r\n    '-22.5': 'ENE',\r\n    '-11.25': 'EBN',\r\n    '0': 'E',\r\n    '11.25': 'EBS',\r\n    '22.5': 'ESE',\r\n    '33.75': 'SEBE',\r\n    '45': 'SE',\r\n    '56.25': 'SEBS',\r\n    '67.5': 'SSE',\r\n    '78.75': 'SBE',\r\n    '90': 'S',\r\n    '101.25': 'SBW',\r\n    '112.5': 'SSW',\r\n    '123.75': 'SWBS',\r\n    '135': 'SW',\r\n    '146.25': 'SWBW',\r\n    '157.5': 'WSW',\r\n    '168.75': 'WBS',\r\n    '180': 'W'\r\n};\r\n\r\nmodule.exports = bearings;","import pad_generic from './configs/pad_generic'\r\nimport pad_unlicensedSNES from './configs/pad_unlicensedSNES'\r\nimport pad_xbox360 from './configs/pad_xbox360'\r\nimport pad_dualshock from './configs/pad_dualshock'\r\n\r\nexport default class controlManager {\r\n    constructor (){\r\n    }\r\n\r\n    mapGamepad(id) {\r\n        id = id.toLowerCase();\r\n        let padConfig = pad_generic;\r\n\r\n        if (id.includes('081f') && id.includes('e401')) {\r\n            padConfig = pad_unlicensedSNES;\r\n        }\r\n        else if (id.includes('xbox') && id.includes('360')) {\r\n            padConfig = pad_xbox360;\r\n        }\r\n        else if (id.includes('054c')) {\r\n            padConfig = pad_dualshock;\r\n        }\r\n        else {\r\n            \r\n        }\r\n\r\n        return padConfig;\r\n    }\r\n\r\n    getBaseControls() {\r\n        return {\r\n            'direction': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'BEARING_LAST': '',\r\n                'DEGREES': 0,\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'direction_secondary': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'DEGREES': 0,\r\n                'BEARING_LAST': '',\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'buttons': {},\r\n            'gamepadMapping': {\r\n                RC_S: 0,\r\n                RC_E: 1,\r\n                RC_W: 2,\r\n                RC_N: 3,\r\n                START: 9,\r\n                SELECT: 8,\r\n                LB: 4,\r\n                RB: 5,\r\n                LT: 6,\r\n                RT: 7,\r\n                LS: 10,\r\n                RS: 11,\r\n                LC_N: 12,\r\n                LC_S: 13,\r\n                LC_W: 14,\r\n                LC_E: 15,\r\n                MENU: 16\r\n            },\r\n            'pointer': {\r\n                'M1': 0,\r\n                'M2': 0,\r\n                'M3': 0,\r\n                'M4': 0,\r\n                'M5': 0,\r\n                'BEARING': '',\r\n                'BEARING_DEGREES': 0,\r\n                'ANGLE': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'position': {x:0,y:0},\r\n            'gamepad': {},\r\n            'keys': {\r\n                'UP': [],\r\n                'DOWN': [],\r\n                'LEFT': [],\r\n                'RIGHT': [],\r\n            },\r\n            'internal': {\r\n                'fakedpadBuffer': [],\r\n                'fakedpadPressed': [],\r\n                'fakedpadReleased': [],\r\n            },\r\n            'interaction': {\r\n                'buffer': [],\r\n                'pressed': [],\r\n                'released': [],\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'device': '',\r\n            },\r\n            'interaction_mapped': {\r\n                'pressed': [],\r\n                'released': [],\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'gamepadType': '',\r\n            },\r\n            'buttons_mapped': {\r\n                RC_S: 0,\r\n                RC_E: 0,\r\n                RC_W: 0,\r\n                RC_N: 0,\r\n                START: 0,\r\n                SELECT: 0,\r\n                MENU: 0,\r\n                LB: 0,\r\n                RB: 0,\r\n                LT: 0,\r\n                RT: 0,\r\n                LS: 0,\r\n                RS: 0,\r\n                LC_N: 0,\r\n                LC_S: 0,\r\n                LC_W: 0,\r\n                LC_E: 0,\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns a struct to hold input control information\r\n     * Set up a struct for each player in the game\r\n     * Direction and Buttons contain the input from the devices\r\n     * The keys struct contains arrays of keyboard characters that will trigger the action\r\n     */\r\n    setupControls(numberOfButtons) {\r\n        numberOfButtons = numberOfButtons || 16;\r\n\r\n        let controls = this.getBaseControls();\r\n\r\n        // Add buttons\r\n        for (let i = 0; i <= numberOfButtons; i++) {\r\n            controls.buttons['B' + i] = 0;\r\n            controls.keys['B' + i] = [];\r\n        }\r\n\r\n        controls.setPosition = function(x,y) {\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        \r\n\r\n        return controls;\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Generic',\r\n    padType: 'generic',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    },\r\n}","/**\r\n * 081f-e401 - UnlicensedSNES\r\n */\r\nmodule.exports = {\r\n    padID: '081f-e401',\r\n    padType: 'snes',\r\n    gamepadMapping : {\r\n        RC_S: 2,\r\n        RC_E: 1,\r\n        RC_W: 3,\r\n        RC_N: 0,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    }\r\n}","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Xbox 360 controller (XInput STANDARD GAMEPAD)',\r\n    padType: 'xbox',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16\r\n    },\r\n}","/**\r\n * Dualshock mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Dualshock',\r\n    padType: 'Sony',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9, // Options\r\n        SELECT: 8, // Share\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16,\r\n        TOUCH: 17\r\n    },\r\n}"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n"],"sourceRoot":""}