{"version":3,"file":"MergedInput.js","mappings":"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","sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/../node_modules/phaser/src/input/keyboard/combo/AdvanceKeyCombo.js","webpack://MergedInput/../node_modules/phaser/src/input/keyboard/combo/ResetKeyCombo.js","webpack://MergedInput/./configs/pad_xbox360.js","webpack://MergedInput/./configs/pad_unlicensedSNES.js","webpack://MergedInput/./configs/pad_generic.js","webpack://MergedInput/./configs/pad_dualshock.js","webpack://MergedInput/./configs/bearings.js","webpack://MergedInput/webpack/bootstrap","webpack://MergedInput/webpack/runtime/compat get default export","webpack://MergedInput/webpack/runtime/define property getters","webpack://MergedInput/webpack/runtime/hasOwnProperty shorthand","webpack://MergedInput/webpack/runtime/make namespace object","webpack://MergedInput/./controlManager.js","webpack://MergedInput/./ButtonCombo.js","webpack://MergedInput/./main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(self, () => {\nreturn ","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Used internally by the KeyCombo class.\n * Return `true` if it reached the end of the combo, `false` if not.\n *\n * @function Phaser.Input.Keyboard.AdvanceKeyCombo\n * @private\n * @since 3.0.0\n *\n * @param {KeyboardEvent} event - The native Keyboard Event.\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to advance.\n *\n * @return {boolean} `true` if it reached the end of the combo, `false` if not.\n */\nvar AdvanceKeyCombo = function (event, combo)\n{\n    combo.timeLastMatched = event.timeStamp;\n    combo.index++;\n\n    if (combo.index === combo.size)\n    {\n        return true;\n    }\n    else\n    {\n        combo.current = combo.keyCodes[combo.index];\n        return false;\n    }\n};\n\nmodule.exports = AdvanceKeyCombo;\n","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Used internally by the KeyCombo class.\n *\n * @function Phaser.Input.Keyboard.ResetKeyCombo\n * @private\n * @since 3.0.0\n *\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo to reset.\n *\n * @return {Phaser.Input.Keyboard.KeyCombo} The KeyCombo.\n */\nvar ResetKeyCombo = function (combo)\n{\n    combo.current = combo.keyCodes[0];\n    combo.index = 0;\n    combo.timeLastMatched = 0;\n    combo.matched = false;\n    combo.timeMatched = 0;\n\n    return combo;\n};\n\nmodule.exports = ResetKeyCombo;\n","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Xbox 360 controller (XInput STANDARD GAMEPAD)',\r\n    padType: 'xbox',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16\r\n    },\r\n}","/**\r\n * 081f-e401 - UnlicensedSNES\r\n */\r\nmodule.exports = {\r\n    padID: '081f-e401',\r\n    padType: 'snes',\r\n    gamepadMapping : {\r\n        RC_S: 2,\r\n        RC_E: 1,\r\n        RC_W: 3,\r\n        RC_N: 0,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    }\r\n}","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Generic',\r\n    padType: 'generic',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    },\r\n}","/**\r\n * Dualshock mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Dualshock',\r\n    padType: 'Sony',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9, // Options\r\n        SELECT: 8, // Share\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16,\r\n        TOUCH: 17\r\n    },\r\n}","const bearings = {\r\n    '-180': 'W',\r\n    '-168.75': 'WBN',\r\n    '-157.5': 'WNW',\r\n    '-146.25': 'NWBW',\r\n    '-135': 'NW',\r\n    '-123.75': 'NWBN',\r\n    '-112.5': 'NNW',\r\n    '-101.25': 'NBW',\r\n    '-90': 'N',\r\n    '-78.75': 'NBE',\r\n    '-67.5': 'NNE',\r\n    '-56.25': 'NEBN',\r\n    '-45': 'NE',\r\n    '-33.75': 'NEBE',\r\n    '-22.5': 'ENE',\r\n    '-11.25': 'EBN',\r\n    '0': 'E',\r\n    '11.25': 'EBS',\r\n    '22.5': 'ESE',\r\n    '33.75': 'SEBE',\r\n    '45': 'SE',\r\n    '56.25': 'SEBS',\r\n    '67.5': 'SSE',\r\n    '78.75': 'SBE',\r\n    '90': 'S',\r\n    '101.25': 'SBW',\r\n    '112.5': 'SSW',\r\n    '123.75': 'SWBS',\r\n    '135': 'SW',\r\n    '146.25': 'SWBW',\r\n    '157.5': 'WSW',\r\n    '168.75': 'WBS',\r\n    '180': 'W'\r\n};\r\n\r\nmodule.exports = bearings;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import pad_generic from './configs/pad_generic'\r\nimport pad_unlicensedSNES from './configs/pad_unlicensedSNES'\r\nimport pad_xbox360 from './configs/pad_xbox360'\r\nimport pad_dualshock from './configs/pad_dualshock'\r\n\r\nexport default class controlManager {\r\n    constructor (){\r\n    }\r\n\r\n    mapGamepad(id) {\r\n        id = id.toLowerCase();\r\n        let padConfig = pad_generic;\r\n\r\n        if (id.includes('081f') && id.includes('e401')) {\r\n            padConfig = pad_unlicensedSNES;\r\n        }\r\n        else if (id.includes('xbox') && id.includes('360')) {\r\n            padConfig = pad_xbox360;\r\n        }\r\n        else if (id.includes('054c')) {\r\n            padConfig = pad_dualshock;\r\n        }\r\n        else {\r\n            \r\n        }\r\n\r\n        return padConfig;\r\n    }\r\n\r\n    getBaseControls() {\r\n        return {\r\n            'direction': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'BEARING_LAST': '',\r\n                'DEGREES': 0,\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'direction_secondary': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'DEGREES': 0,\r\n                'BEARING_LAST': '',\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'buttons': {},\r\n            'timers' : {},\r\n            'gamepadMapping': {\r\n                RC_S: 0,\r\n                RC_E: 1,\r\n                RC_W: 2,\r\n                RC_N: 3,\r\n                START: 9,\r\n                SELECT: 8,\r\n                LB: 4,\r\n                RB: 5,\r\n                LT: 6,\r\n                RT: 7,\r\n                LS: 10,\r\n                RS: 11,\r\n                LC_N: 12,\r\n                LC_S: 13,\r\n                LC_W: 14,\r\n                LC_E: 15,\r\n                MENU: 16\r\n            },\r\n            'pointer': {\r\n                'M1': 0,\r\n                'M2': 0,\r\n                'M3': 0,\r\n                'M4': 0,\r\n                'M5': 0,\r\n                'BEARING': '',\r\n                'BEARING_DEGREES': 0,\r\n                'ANGLE': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'position': {x:0,y:0},\r\n            'position_last': {x:0,y:0},\r\n            'gamepad': {},\r\n            'keys': {\r\n                'UP': [],\r\n                'DOWN': [],\r\n                'LEFT': [],\r\n                'RIGHT': [],\r\n            },\r\n            'internal': {\r\n                'fakedpadBuffer': [],\r\n                'fakedpadPressed': [],\r\n                'fakedpadReleased': [],\r\n            },\r\n            'interaction': {\r\n                'buffer': [],\r\n                'pressed': [],\r\n                'released': [],\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'device': '',\r\n            },\r\n            'interaction_mapped': {\r\n                'pressed': [],\r\n                'released': [],\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'gamepadType': '',\r\n            },\r\n            'buttons_mapped': {\r\n                RC_S: 0,\r\n                RC_E: 0,\r\n                RC_W: 0,\r\n                RC_N: 0,\r\n                START: 0,\r\n                SELECT: 0,\r\n                MENU: 0,\r\n                LB: 0,\r\n                RB: 0,\r\n                LT: 0,\r\n                RT: 0,\r\n                LS: 0,\r\n                RS: 0,\r\n                LC_N: 0,\r\n                LC_S: 0,\r\n                LC_W: 0,\r\n                LC_E: 0,\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns a struct to hold input control information\r\n     * Set up a struct for each player in the game\r\n     * Direction and Buttons contain the input from the devices\r\n     * The keys struct contains arrays of keyboard characters that will trigger the action\r\n     */\r\n    setupControls(numberOfButtons) {\r\n        numberOfButtons = numberOfButtons || 16;\r\n\r\n        let controls = this.getBaseControls();\r\n\r\n        // Add buttons\r\n        for (let i = 0; i <= numberOfButtons; i++) {\r\n            controls.buttons['B' + i] = 0;\r\n            controls.keys['B' + i] = [];\r\n        }\r\n\r\n        // Add timers \r\n        for (let i = 0; i <= numberOfButtons; i++) {\r\n            controls.timers['B' + i] = {\r\n                'pressed': 0,\r\n                'released': 0,\r\n                'duration': 0\r\n            };\r\n        }\r\n        for (let thisDirection of ['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT']) {\r\n            controls.timers[thisDirection] = {\r\n                'pressed': 0,\r\n                'released': 0,\r\n                'duration': 0\r\n            };\r\n        }\r\n\r\n        for (let thisPointer of ['M1', 'M2', 'M3', 'M4', 'M5']) {\r\n            controls.timers[thisPointer] = {\r\n                'pressed': 0,\r\n                'released': 0,\r\n                'duration': 0\r\n            };\r\n        }\r\n\r\n\r\n        controls.setPosition = function(x,y) {\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        \r\n\r\n        return controls;\r\n    }\r\n\r\n\r\n}\r\n","import AdvanceKeyCombo from 'phaser/src/input/keyboard/combo/AdvanceKeyCombo.js';\r\nimport ResetKeyCombo from 'phaser/src/input/keyboard/combo/ResetKeyCombo.js';\r\n\r\nexport default class ButtonCombo extends Phaser.Input.Keyboard.KeyCombo {\r\n    constructor(mergedInput, player, buttons, config) {\r\n        super(mergedInput.systems.input.keyboard, buttons, config);\r\n\r\n        this.player = player;\r\n        this.mergedInput = mergedInput;\r\n        this.keyCodes = buttons; // KeyCombo expects this to be an array of keycodes, we'll be checking against button names\r\n\r\n        mergedInput.events.on('gamepad_buttondown', this.onButtonDown, this);\r\n        this.current = this.keyCodes[0];\r\n    }\r\n\r\n    onButtonDown(event) {\r\n        if (this.matched || !this.enabled) {\r\n            return;\r\n        }\r\n\r\n        var matched = this.ProcessButtonCombo(event, this);\r\n        if (matched) {\r\n            this.mergedInput.eventEmitter.emit('mergedInput', { combo: this, player: this.player, action: 'Button combo matched' });\r\n            this.mergedInput.events.emit('buttoncombomatch', { player: this.player, combo: this });\r\n\r\n            if (this.resetOnMatch) {\r\n                ResetKeyCombo(this);\r\n            }\r\n            else if (this.deleteOnMatch) {\r\n                this.destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n    ProcessButtonCombo (event, combo) {\r\n        // Set a timestamp from the gamepad\r\n        event.timeStamp = this.mergedInput.systems.time.now\r\n\r\n        // Don't check buttons on a different pad\r\n        if (combo.player.index !== event.player) { \r\n            return false;\r\n        }\r\n\r\n        // Check matched\r\n        if (combo.matched) {\r\n            return true;\r\n        }\r\n        \r\n        // Compare the current action with the button pressed\r\n        let buttonMatch = false;\r\n        if (event.button === combo.current) {\r\n            buttonMatch = true;\r\n        }\r\n\r\n        let mappedButton = this.mergedInput.getMappedButton(combo.player, event.button);\r\n        if (mappedButton === combo.current) {\r\n            buttonMatch = true;\r\n        }\r\n         \r\n        let unMappedButton = this.mergedInput.getUnmappedButton(combo.player, mappedButton);\r\n        if (unMappedButton === combo.current) {\r\n            buttonMatch = true;\r\n        }\r\n\r\n        var comboMatched = false;\r\n        var keyMatched = false;\r\n\r\n        if (buttonMatch) {\r\n            //  Button was correct\r\n\r\n            if (combo.index > 0 && combo.maxKeyDelay > 0) {\r\n                //  We have to check to see if the delay between\r\n                //  the new key and the old one was too long (if enabled)\r\n\r\n                var timeLimit = combo.timeLastMatched + combo.maxKeyDelay;\r\n\r\n                //  Check if they pressed it in time or not\r\n                if (event.timeStamp <= timeLimit) {\r\n                    keyMatched = true;\r\n                    comboMatched = AdvanceKeyCombo(event, combo);\r\n                }\r\n            }\r\n            else {\r\n                keyMatched = true;\r\n\r\n                //  We don't check the time for the first key pressed, so just advance it\r\n                comboMatched = AdvanceKeyCombo(event, combo);\r\n            }\r\n        }\r\n\r\n        if (!keyMatched && combo.resetOnWrongKey) {\r\n            //  Wrong key was pressed\r\n            combo.index = 0;\r\n            combo.current = combo.keyCodes[0];\r\n        }\r\n\r\n        if (comboMatched) {\r\n            combo.timeLastMatched = event.timeStamp;\r\n            combo.matched = true;\r\n            combo.timeMatched = event.timeStamp;\r\n        }\r\n\r\n        return comboMatched;\r\n    };\r\n\r\n\r\n    destroy() {\r\n        this.mergedInput.events.off('gamepad_buttondown', this.onButtonDown);\r\n        super.destroy();\r\n    }\r\n}","import bearings from './configs/bearings'\nimport controlManager from './controlManager'\nimport ButtonCombo from './ButtonCombo'\n\nexport default class MergedInput extends Phaser.Plugins.ScenePlugin {\n\n\t/**\n\t * The Merged Input plugin is designed to run in the background and handle input.\n\t * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\n\t *\n\t * @extends Phaser.Plugins.ScenePlugin\n\t * @param {*} scene\n\t * @param {*} pluginManager\n\t */\n\tconstructor(scene, pluginManager) {\n\t\tsuper(scene, pluginManager);\n\t\tthis.scene = scene;\n\n\t\t// Players\n\t\tthis.players = [];\n\t\t// Gamepads\n\t\tthis.gamepads = [];\n\t\t// Keys object to store Phaser key objects. We'll check these during update\n\t\tthis.keys = {};\n\n\t\tthis.bearings = bearings;\n\n\t\tthis.dpadMappings = {\n\t\t\t'UP': 12,\n\t\t\t'DOWN': 13,\n\t\t\t'LEFT': 14,\n\t\t\t'RIGHT': 15\n\t\t}\n\n\t\t// A threshold (between 0 and 1) below which analog stick input will be ignored\n\t\tthis.axisThreshold = 0;\n\n\t\t// The number of directions to snap to when mapping input to bearings (Defaults to 32)\n\t\tthis.numDirections = Object.keys(this.bearings).length - 1;\n\n\t\tthis.controlManager = new controlManager()\n\t}\n\n\tboot() {\n\t\t// Scene event emitter\n\t\tthis.eventEmitter = this.systems.events;\n\t\t// Plugin event emitter\n\t\tthis.events = new Phaser.Events.EventEmitter();\n\n\t\tthis.game.events.on(Phaser.Core.Events.PRE_STEP, this.preupdate, this);\n\t\tthis.game.events.on(Phaser.Core.Events.POST_STEP, this.postupdate, this);\n\t\t// Handle the game losing focus\n\t\tthis.game.events.on(Phaser.Core.Events.BLUR, () => {\n\t\t\tthis.loseFocus()\n\t\t})\n\n\t\t// Gamepad\n\t\tif (typeof this.systems.input.gamepad !== 'undefined') {\n\t\t\tthis.systems.input.gamepad.on('connected', function (thisGamepad) {\n\t\t\t\tthis.refreshGamepads();\n\t\t\t\tthis.setupGamepad(thisGamepad)\n\t\t\t}, this);\n\n\t\t\t// Check to see if the gamepad has already been setup by the browser\n\t\t\tthis.systems.input.gamepad.refreshPads();\n\t\t\tif (this.systems.input.gamepad.total) {\n\t\t\t\tthis.refreshGamepads();\n\t\t\t\tfor (const thisGamepad of this.gamepads) {\n\t\t\t\t\tthis.systems.input.gamepad.emit('connected', thisGamepad);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.systems.input.gamepad.on('down', this.gamepadButtonDown, this);\n\t\t\tthis.systems.input.gamepad.on('up', this.gamepadButtonUp, this);\n\t\t}\n\n\t\t// Keyboard\n\t\tthis.systems.input.keyboard.on('keydown', this.keyboardKeyDown, this);\n\t\tthis.systems.input.keyboard.on('keyup', this.keyboardKeyUp, this);\n\n\n\t\t// Pointer\n\t\tthis.systems.input.mouse.disableContextMenu();\n\t}\n\n\tpreupdate() {\n\t\t// If the first player has moved, we want to update the pointer position\n\t\tif (typeof this.players[0] !== 'undefined') {\n\t\t\tif (this.players[0].position.x !== this.players[0].position_last.x || this.players[0].position.y !== this.players[0].position_last.y) {\n\t\t\t\tthis.pointerMove(this.systems.input.activePointer);\n\t\t\t}\n\t\t}\n\t\tthis.players[0].position_last.x = this.players[0].position.x;\n\t\tthis.players[0].position_last.y = this.players[0].position.y;\n\n\t\tthis.checkKeyboardInput();\n\t\tthis.checkGamepadInput();\n\t\tthis.checkPointerInput();\n\n\t\t// Loop through players and handle input\n\t\tfor (let thisPlayer of this.players) {\n\t\t\t// If the pointer hasn't moved, and the scene has changed, this can end up as undefined\n\t\t\tthisPlayer.pointer.BEARING = typeof thisPlayer.pointer.BEARING != 'undefined' ? thisPlayer.pointer.BEARING : '';\n\t\t\tthisPlayer.pointer.BEARING_DEGREES = typeof thisPlayer.pointer.BEARING_DEGREES != 'undefined' ? thisPlayer.pointer.BEARING_DEGREES : 0;\n\t\t\tthisPlayer.pointer.ANGLE = typeof thisPlayer.pointer.ANGLE != 'undefined' ? thisPlayer.pointer.ANGLE : '';\n\t\t\tthisPlayer.pointer.DEGREES = typeof thisPlayer.pointer.DEGREES != 'undefined' ? thisPlayer.pointer.DEGREES : 0;\n\t\t\tthisPlayer.pointer.POINTERANGLE = typeof thisPlayer.pointer.POINTERANGLE != 'undefined' ? thisPlayer.pointer.POINTERANGLE : ''\n\t\t\tthisPlayer.pointer.POINTERDIRECTION = typeof thisPlayer.pointer.POINTERDIRECTION != 'undefined' ? thisPlayer.pointer.POINTERDIRECTION : ''\n\t\t\tthisPlayer.pointer.PLAYERPOS = typeof thisPlayer.pointer.PLAYERPOS != 'undefined' ? thisPlayer.pointer.PLAYERPOS : ''\n\n\t\t\tthisPlayer.direction.ANGLE = this.mapDirectionsToAngle(thisPlayer.direction);\n\t\t\tthisPlayer.direction.ANGLE_LAST = thisPlayer.direction.ANGLE != '' ? thisPlayer.direction.ANGLE : thisPlayer.direction.ANGLE_LAST;\n\t\t\tthisPlayer.direction.DEGREES = thisPlayer.direction.ANGLE !== -1 ? Math.round(Phaser.Math.RadToDeg(thisPlayer.direction.ANGLE) * 100) / 100 : -1;\n\t\t\tthisPlayer.direction.DEGREES_LAST = thisPlayer.direction.DEGREES != -1 ? thisPlayer.direction.DEGREES : thisPlayer.direction.DEGREES_LAST;\n\n\t\t\tthisPlayer.direction.BEARING = thisPlayer.direction.ANGLE !== -1 ? this.getBearingFromAngle(thisPlayer.direction.ANGLE) : '';\n\t\t\tthisPlayer.direction.BEARING_LAST = thisPlayer.direction.BEARING != '' ? thisPlayer.direction.BEARING : thisPlayer.direction.BEARING_LAST;\n\t\t\tthisPlayer.direction.BEARING_DEGREES = thisPlayer.direction.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING)) : 0;\n\t\t\tthisPlayer.direction.BEARING_DEGREES_LAST = thisPlayer.direction.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING_LAST)) : 0;\n\n\t\t\tthisPlayer.direction_secondary.ANGLE = this.mapDirectionsToAngle(thisPlayer.direction_secondary);\n\t\t\tthisPlayer.direction_secondary.ANGLE_LAST = thisPlayer.direction_secondary.ANGLE != '' ? thisPlayer.direction_secondary.ANGLE : thisPlayer.direction_secondary.ANGLE_LAST;\n\t\t\tthisPlayer.direction_secondary.DEGREES = thisPlayer.direction_secondary.ANGLE !== -1 ? Math.round(Phaser.Math.RadToDeg(thisPlayer.direction_secondary.ANGLE) * 100) / 100 : -1;\n\t\t\tthisPlayer.direction_secondary.DEGREES_LAST = thisPlayer.direction_secondary.DEGREES != -1 ? thisPlayer.direction_secondary.DEGREES : thisPlayer.direction_secondary.DEGREES_LAST;\n\n\t\t\tthisPlayer.direction_secondary.BEARING = thisPlayer.direction_secondary.ANGLE !== -1 ? this.getBearingFromAngle(thisPlayer.direction_secondary.ANGLE) : '';\n\t\t\tthisPlayer.direction_secondary.BEARING_LAST = thisPlayer.direction_secondary.BEARING != '' ? thisPlayer.direction_secondary.BEARING : thisPlayer.direction_secondary.BEARING_LAST;\n\t\t\tthisPlayer.direction_secondary.BEARING_DEGREES = thisPlayer.direction_secondary.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING)) : 0;\n\t\t\tthisPlayer.direction_secondary.BEARING_DEGREES_LAST = thisPlayer.direction_secondary.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING_LAST)) : 0;\n\t\t}\n\t}\n\n\tpostupdate() {\n\t\t// Loop through players and manage buffered input\n\t\tfor (let thisPlayer of this.players) {\n\t\t\t// Clear the interaction buffer\n\t\t\tthis.clearBuffer(thisPlayer);\n\t\t}\n\t}\n\n\t/**\n\t * Clear the interaction buffer for the given player\n\t * In the case of 'fake' DPad presses, we're using some convoluted buffers to keep the 'pressed' and 'released' values around for an extra tick\n\t * As they're created in this update loop, they're otherwise cleared before the consumer can use them.\n\t * @param {*} thisPlayer\n\t */\n\tclearBuffer(thisPlayer) {\n\t\tif (thisPlayer.interaction.pressed.length > 0 && thisPlayer.internal.fakedpadPressed.length == 0) {\n\t\t\tthisPlayer.interaction.buffer = [];\n\t\t}\n\t\tif (thisPlayer.interaction.buffer.length == 0) {\n\t\t\tthisPlayer.interaction.pressed = [];\n\t\t\tthisPlayer.interaction_mapped.pressed = [];\n\t\t\tif (thisPlayer.internal.fakedpadReleased.length == 0) {\n\t\t\t\tthisPlayer.interaction.released = [];\n\t\t\t\tthisPlayer.interaction_mapped.released = [];\n\t\t\t}\n\t\t}\n\n\t\tthisPlayer.internal.fakedpadPressed = [];\n\t\tthisPlayer.internal.fakedpadReleased = [];\n\t}\n\n\t/**\n\t * Function to run when the game loses focus\n\t * We want to fake releasing the buttons here, so that they're not stuck down without an off event when focus returns to the game\n\t */\n\tloseFocus() {\n\t\t// Loop through defined keys and reset them\n\t\tfor (let thisKey in this.keys) {\n\t\t\tthis.keys[thisKey].reset();\n\t\t}\n\t}\n\n\t/**\n\t * Set up the gamepad and associate with a player object\n\t */\n\tsetupGamepad(thisGamepad) {\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', id: thisGamepad.id, player: thisGamepad.index, action: 'Connected' });\n\t\tthis.events.emit('gamepad_connected', thisGamepad)\n\n\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\n\t\t\tthis.addPlayer();\n\t\t}\n\n\t\tlet gamepadID = thisGamepad.id.toLowerCase();\n\t\tthis.players[thisGamepad.index].gamepad = thisGamepad;\n\n\t\t// Map the gamepad buttons\n\t\tlet mappedPad = this.controlManager.mapGamepad(gamepadID);\n\t\tthis.players[thisGamepad.index].gamepadMapping = mappedPad.gamepadMapping;\n\t\tthis.players[thisGamepad.index].interaction_mapped.gamepadType = mappedPad.padType;\n\t\tfor (let thisButton in this.players[thisGamepad.index].gamepadMapping) {\n\t\t\tthis.players[thisGamepad.index].buttons_mapped[thisButton] = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Set a threshold (between 0 and 1) below which analog stick input will be ignored\n\t * @param {*} value\n\t * @returns\n\t */\n\tsetAxisThreshold(value) {\n\t\tthis.axisThreshold = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the number of directions to snap to when mapping input to bearings\n\t */\n\tsetNumDirections(value) {\n\t\tif (typeof value === 'number' && value > 0) {\n\t\t\tthis.numDirections = value;\n\t\t}\n\t\treturn this;\n\t}\n\n\n\trefreshGamepads() {\n\t\t// Sometimes, gamepads are undefined. For some reason.\n\t\tthis.gamepads = this.systems.input.gamepad.gamepads.filter(function (el) {\n\t\t\treturn el != null;\n\t\t});\n\n\t\tfor (const [index, thisGamepad] of this.gamepads.entries()) {\n\t\t\tthisGamepad.index = index; // Overwrite the gamepad index, in case we had undefined gamepads earlier\n\n\t\t\t/**\n\t\t\t * Some cheap gamepads use the first axis as a dpad, in which case we won't have the dpad buttons 12-15\n\t\t\t */\n\t\t\tthisGamepad.fakedpad = thisGamepad.buttons.length < 15;\n\t\t}\n\t}\n\n\t/**\n\t * Add a new player object to the players array\n\t * @param {number} index Player index - if a player object at this index already exists, it will be returned instead of creating a new player object\n\t * @param {number} numberOfButtons The number of buttons to assign to the player object. Defaults to 16. Fewer than 16 is not recommended, as gamepad DPads typically map to buttons 12-15\n\t */\n\taddPlayer(index, numberOfButtons) {\n\t\tnumberOfButtons = numberOfButtons || 16;\n\t\tif (typeof Number.isInteger(index) && typeof this.players[index] !== 'undefined') {\n\t\t\treturn this.players[index];\n\t\t}\n\t\telse {\n\t\t\t// Set up player object\n\t\t\tlet newPlayer = this.controlManager.setupControls(numberOfButtons);\n\n\t\t\t// Add helper functions to the player object\n\t\t\tthis.addPlayerHelperFunctions(newPlayer);\n\n\t\t\t// Push new player to players array\n\t\t\tthis.players.push(newPlayer);\n\n\t\t\tthis.players[this.players.length - 1].index = this.players.length - 1;\n\n\t\t\t// If this is the first player, add the pointer events\n\t\t\tif (this.players.length == 1) {\n\t\t\t\tthis.systems.input.on('pointermove', function (pointer) {\n\t\t\t\t\tthis.pointerMove(pointer);\n\t\t\t\t}, this);\n\n\t\t\t\tthis.systems.input.on('pointerdown', function (pointer) {\n\t\t\t\t\tthis.pointerDown(pointer);\n\t\t\t\t}, this);\n\n\t\t\t\tthis.systems.input.on('pointerup', function (pointer) {\n\t\t\t\t\tthis.pointerUp(pointer);\n\t\t\t\t}, this);\n\t\t\t}\n\n\t\t\treturn this.players[this.players.length - 1];\n\t\t}\n\t}\n\n\t/**\n\t * Add helper functions to the player object\n\t * @param {*} player\n\t */\n\taddPlayerHelperFunctions(player) {\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any were pressed in this update step.\n\t\t * This will only fire once per button press. If you need to check for a button being held down, use isDown instead.\n\t\t * Returns the name of the matched button(s), in case you need it.\n\t\t */\n\t\tplayer.interaction.isPressed = (button) => {\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\n\t\t\tlet matchedButtons = button.filter(x => player.interaction.pressed.includes(x))\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\n\t\t},\n\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any are currently pressed in this update step.\n\t\t * This differs from the isPressed function in that it will return true if the button is currently pressed, even if it was pressed in a previous update step.\n\t\t * Returns the name of the matched button(s), in case you need it.\n\t\t */\n\t\tplayer.interaction.isDown = (button) => {\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\n\t\t\tlet matchedButtons = button.filter(x => player.buttons[x])\n\t\t\tlet matchedDirections = button.filter(x => player.direction[x])\n\t\t\tlet matchedPointer = button.filter(x => player.pointer[x])\n\t\t\tlet matchedAll = [...matchedButtons, ...matchedDirections, ...matchedPointer];\n\n\t\t\treturn matchedAll.length ? matchedAll : false;\n\t\t},\n\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any were released in this update step.\n\t\t * Returns the name of the matched button(s), in case you need it.\n\t\t */\n\t\tplayer.interaction.isReleased = (button) => {\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\n\t\t\tlet matchedButtons = button.filter(x => player.interaction.released.includes(x))\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\n\t\t}\n\n\t\t/**\n\t\t * Pass a mapped button name, or an array of mapped button names to check if any were pressed in this update step.\n\t\t * This will only fire once per button press. If you need to check for a button being held down, use isDown instead.\n\t\t * Returns the name of the matched mapped button(s), in case you need it.\n\t\t */\n\t\tplayer.interaction_mapped.isPressed = (button) => {\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\n\t\t\tlet matchedButtons = button.filter(x => player.interaction_mapped.pressed.includes(x))\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\n\t\t},\n\n\t\t/**\n\t\t * Pass a mapped button name, or an array of mapped button names to check if any are currently pressed in this update step.\n\t\t * This differs from the isPressed function in that it will return true if the button is currently pressed, even if it was pressed in a previous update step.\n\t\t * Returns the name of the matched button(s), in case you need it.\n\t\t */\n\t\tplayer.interaction_mapped.isDown = (button) => {\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\n\t\t\tlet matchedButtons = button.filter(x => player.buttons_mapped[x])\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\n\t\t},\n\n\t\t/**\n\t\t * Pass a mapped button name, or an array of mapped button names to check if any were released in this update step.\n\t\t * Returns the name of the matched mapped button(s), in case you need it.\n\t\t */\n\t\tplayer.interaction_mapped.isReleased = (button) => {\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\n\t\t\tlet matchedButtons = button.filter(x => player.interaction_mapped.released.includes(x))\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\n\t\t}\n\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any are currently pressed in this update step.\n\t\t * Similar to Phaser's keyboard plugin, the checkDown function can accept a 'duration' parameter, and will only register a press once every X milliseconds.\n\t\t * Returns the name of the matched button(s)\n\t\t *\n\t\t * @param {string|array} button Array of buttons to check\n\t\t * @param {number} duration The duration which must have elapsed before this button is considered as being down.\n\t\t * @param {boolean} includeFirst - When true, the initial press of the button will be included in the results. Defaults to false.\n\t\t */\n\t\tplayer.interaction.checkDown = (button, duration, includeFirst) => {\n\t\t\tif (includeFirst === undefined) { includeFirst = false; }\n\t\t\tif (duration === undefined) { duration = 0; }\n\n\t\t\tlet matchedButtons = [];\n\t\t\tlet downButtons = player.interaction.isDown(button)\n\t\t\tif (downButtons.length) {\n\n\t\t\t\tfor (let thisButton of downButtons) {\n\t\t\t\t\tif (typeof player.timers[thisButton]._tick === 'undefined') {\n\t\t\t\t\t\tplayer.timers[thisButton]._tick = 0;\n\t\t\t\t\t\tif (includeFirst) {\n\t\t\t\t\t\t\tmatchedButtons.push(thisButton);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet t = Phaser.Math.Snap.Floor(this.scene.sys.time.now - player.timers[thisButton].pressed, duration);\n\t\t\t\t\tif (t > player.timers[thisButton]._tick) {\n\t\t\t\t\t\tthis.game.events.once(Phaser.Core.Events.POST_STEP, ()=>{\n\t\t\t\t\t\t\tplayer.timers[thisButton]._tick = t;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tmatchedButtons.push(thisButton);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\n\t\t},\n\n\t\t/**\n\t\t * Mapped version of the checkDown version - resolves mapped button names and calls the checkDown function\n\t\t */\n\t\t\tplayer.interaction_mapped.checkDown = (button, duration, includeFirst) => {\n\t\t\tif (includeFirst === undefined) { includeFirst = false; }\n\t\t\tlet unmappedButtons = [];\n\n\t\t\t// Resolve the unmapped button names to a new array\n\t\t\tfor (let thisButton of button) {\n\t\t\t\tlet unmappedButton = this.getUnmappedButton(player, thisButton);\n\n\t\t\t\tif (unmappedButton) {\n\t\t\t\t\tunmappedButtons.push(unmappedButton)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet downButtons = player.interaction.checkDown(unmappedButtons, duration, includeFirst);\n\t\t\treturn downButtons.length ? downButtons.map(x => this.getMappedButton(player, x)) : false;\n \t\t}\n\n\n\t\t/**\n\t\t * The previous functions are specific to the interaction and interaction_mapped definition of buttons.\n\t\t * In general you would pick a definition scheme and query that object (interaction or interaction_mapped), just for ease though, we'll add some functions that accept either type of convention\n\t\t */\n\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any were pressed in this update step.\n\t\t * This will only fire once per button press. If you need to check for a button being held down, use isDown instead.\n\t\t * Returns the name of the matched button(s), in case you need it.\n\t\t */\n\t\tplayer.isPressed = (button) => {\n\t\t\tlet interaction = player.interaction.isPressed(button) || [];\n\t\t\tlet interaction_mapped = player.interaction_mapped.isPressed(button) || [];\n\t\t\tlet matchedButtons = [...interaction, ...interaction_mapped];\n\t\t\treturn matchedButtons.length ? matchedButtons : false\n\t\t},\n\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any are currently pressed in this update step.\n\t\t * This differs from the isPressed function in that it will return true if the button is currently pressed, even if it was pressed in a previous update step.\n\t\t * Returns the name of the button(s), in case you need it.\n\t\t */\n\t\tplayer.isDown = (button) => {\n\t\t\tlet interaction = player.interaction.isDown(button) || [];\n\t\t\tlet interaction_mapped = player.interaction_mapped.isDown(button) || [];\n\t\t\tlet matchedButtons = [...interaction, ...interaction_mapped];\n\t\t\treturn matchedButtons.length ? matchedButtons : false\n\t\t},\n\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any were released in this update step.\n\t\t * Returns the name of the matched button(s), in case you need it.\n\t\t */\n\t\tplayer.isReleased = (button) => {\n\t\t\tlet interaction = player.interaction.isReleased(button) || [];\n\t\t\tlet interaction_mapped = player.interaction_mapped.isReleased(button) || [];\n\t\t\tlet matchedButtons = [...interaction, ...interaction_mapped];\n\t\t\treturn matchedButtons.length ? matchedButtons : false\n\t\t}\n\n\n\t\t/**\n\t\t * Pass a button name, or an array of button names to check if any are currently pressed in this update step.\n\t\t * Similar to Phaser's keyboard plugin, the checkDown function can accept a 'duration' parameter, and will only register a press once every X milliseconds.\n\t\t * Returns the name of the matched button(s)\n\t\t *\n\t\t * @param {string|array} button Array of buttons to check\n\t\t * @param {number} - The duration which must have elapsed before this button is considered as being down.\n\t\t */\n\t\tplayer.checkDown = (button, duration, includeFirst) => {\n\t\t\tif (includeFirst === undefined) { includeFirst = false; }\n\t\t\tlet interaction = player.interaction.checkDown(button, duration, includeFirst) || [];\n\t\t\tlet interaction_mapped = player.interaction_mapped.checkDown(button, duration, includeFirst) || [];\n\t\t\tlet matchedButtons = [...interaction, ...interaction_mapped];\n\t\t\treturn matchedButtons.length ? matchedButtons : false\n\t\t}\n\n\n\t\tplayer.setDevice = (device) => {\n\t\t\tif (player.interaction.device != device) {\n\t\t\t\tthis.eventEmitter.emit('mergedInput', { device: device, player: player.index, action: 'Device Changed' });\n\t\t\t\tthis.events.emit('device_changed', { player: player.index, device: device });\n\t\t\t}\n\t\t\tplayer.interaction.device = device;\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get player object\n\t * @param {number} index Player index\n\t */\n\tgetPlayer(index) {\n\t\treturn typeof this.players[index] !== 'undefined' ? this.players[index] : ''\n\t}\n\n\tgetPlayerIndexFromKey(key) {\n\t\tfor (let thisPlayer of this.players) {\n\t\t\t// Loop through all the keys assigned to this player\n\t\t\tfor (var thisKey in thisPlayer.keys) {\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\n\t\t\t\t\tif (thisValue == key) {\n\t\t\t\t\t\treturn thisPlayer.index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tgetPlayerButtonFromKey(key) {\n\t\tfor (let thisPlayer of this.players) {\n\t\t\t// Loop through all the keys assigned to this player\n\t\t\tfor (var thisKey in thisPlayer.keys) {\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\n\t\t\t\t\tif (thisValue == key) {\n\t\t\t\t\t\t// Now we have a matching button value, check to see if it's in our mapped buttons, in which case we want to return the button number it matches to\n\t\t\t\t\t\tif (typeof thisPlayer.gamepadMapping[thisKey] !== \"undefined\") {\n\t\t\t\t\t\t\treturn 'B' + thisPlayer.gamepadMapping[thisKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn thisKey;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\n\t/**\n\t * Return an array of actions that a player may use\n\t * @param {number} player\n\t * @returns\n\t */\n\tgetPlayerActions(player) {\n\t\tlet actions = ['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'];\n\t\tactions.push(...Object.keys(this.players[player].gamepadMapping));\n\t\tactions.push(...Object.keys(this.players[player].buttons));\n\n\t\treturn actions;\n\t}\n\n\t/**\n\t * Given a player and a button ID, return the mapped button name, e.g. 0 = 'RC_S' (Right cluster, South - X on an xbox gamepad)\n\t * @param {*} player\n\t * @param {*} buttonID\n\t */\n\tgetMappedButton(player, buttonID) {\n\t\tbuttonID = buttonID.toString().replace(/\\D/g, '');\n\t\treturn Object.keys(player.gamepadMapping).find(key => player.gamepadMapping[key] == buttonID);\n\t}\n\n\t/**\n\t * Given a player and a mapped button name, return the button ID that it resolves to, e.g. 'RC_S' (Right cluster, South - X on an xbox gamepad) = B0.\n\t * This takes directions into account and will thus return 'LEFT' for LC_W, instead of the button ID that can be found in the gamepadMapping.\n\t * @param {*} player\n\t * @param {*} mappedButton\n\t */\n\tgetUnmappedButton(player, mappedButton) {\n\t\tlet buttonNo = player.gamepadMapping[mappedButton];\n\t\tlet dpadMapping = this.dpadMappings;\n\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == buttonNo);\n\n\t\treturn direction ? direction : 'B' + player.gamepadMapping[mappedButton];\n\t}\n\n\t// Keyboard functions\n\n\t/**\n\t * Define a key for a player/action combination\n\t * @param {number} player The player on which we're defining a key\n\t * @param {string} action The action to define\n\t * @param {string} value The key to use\n\t * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\n\t */\n\tdefineKey(player = 0, action, value, append = false) {\n\t\t// Set up a new player if none defined\n\t\tif (typeof this.players[player] === 'undefined') {\n\t\t\tthis.addPlayer();\n\t\t}\n\n\t\tif (this.getPlayerActions(player).includes(action)) {\n\t\t\tif (append && (typeof this.players[player].keys[action] !== 'undefined')) {\n\t\t\t\tthis.players[player].keys[action].push([value]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.players[player].keys[action] = [];\n\t\t\t\tthis.players[player].keys[action].push([value]);\n\t\t\t}\n\n\t\t\tthis.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate through players and check for interaction with defined keys\n\t */\n\tcheckKeyboardInput() {\n\t\t// Loop through players and check for keypresses\n\t\tfor (let thisPlayer of this.players) {\n\t\t\t// Loop through all the keys assigned to this player\n\t\t\tfor (var thisKey in thisPlayer.keys) {\n\t\t\t\tlet action = 0;\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\n\t\t\t\t\t// Check if the key is down\n\t\t\t\t\taction = (this.keys[thisValue].isDown) ? 1 : action;\n\t\t\t\t}\n\n\t\t\t\t// Set the action in the player object\n\n\t\t\t\t// Dpad\n\t\t\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT'].includes(thisKey)) {\n\t\t\t\t\tthisPlayer.direction[thisKey] = action;\n\t\t\t\t\tif (action == 1) {\n\t\t\t\t\t\tthisPlayer.direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Alternative direction\n\t\t\t\telse if (['ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'].includes(thisKey)) {\n\t\t\t\t\tthisPlayer.direction_secondary[thisKey.replace('ALT_', '')] = action;\n\t\t\t\t\tif (action == 1) {\n\t\t\t\t\t\tthisPlayer.direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Friendly button names\n\t\t\t\telse if (thisKey in thisPlayer.gamepadMapping) {\n\t\t\t\t\t// Get the button number from the gamepad mapping\n\t\t\t\t\tthisPlayer.buttons['B' + thisPlayer.gamepadMapping[thisKey]] = action;\n\t\t\t\t\tthisPlayer.buttons_mapped[thisKey] = action;\n\t\t\t\t\tif (action == 1) {\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Numbered buttons\n\t\t\t\telse {\n\t\t\t\t\tthisPlayer.buttons[thisKey] = action;\n\t\t\t\t\tif (action == 1) {\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set the latest interaction flag\n\t\t\t\tif (action == 1) {\n\t\t\t\t\tthisPlayer.setDevice('keyboard');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * When a keyboard button is pressed down, this function will emit a mergedInput event in the global registry.\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\n\t */\n\tkeyboardKeyDown(event) {\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\n\n\t\tif (playerIndex > -1 && playerAction != '') {\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\n\t\t\tthis.events.emit('keyboard_keydown', { player: playerIndex, key: keyCode });\n\n\t\t\tthisPlayer.setDevice('keyboard');\n\t\t\tthisPlayer.interaction.pressed.push(playerAction);\n\t\t\tthisPlayer.interaction.buffer.push(playerAction);\n\t\t\tthisPlayer.interaction.last = playerAction;\n\t\t\tthisPlayer.interaction.lastPressed = playerAction;\n\n\t\t\t// Update timers\n\t\t\tthisPlayer.timers[playerAction].pressed = this.scene.sys.time.now;\n\t\t\tthisPlayer.timers[playerAction].released = 0;\n\t\t\tthisPlayer.timers[playerAction].duration = 0;\n\n\t\t\t// Update mapped button object\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\n\t\t\t}\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 1;\n\t\t\t\t\tthisPlayer.interaction_mapped.pressed.push(mappedButton);\n\t\t\t\t\tthisPlayer.interaction_mapped.last = mappedButton;\n\t\t\t\t\tthisPlayer.interaction_mapped.lastPressed = mappedButton;\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * When a keyboard button is released, this function will emit a mergedInput event in the global registry.\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\n\t */\n\tkeyboardKeyUp(event) {\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\n\n\t\tif (playerIndex > -1 && playerAction != '') {\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'UP' });\n\t\t\tthis.events.emit('keyboard_keyup', { player: playerIndex, key: keyCode });\n\n\t\t\tthisPlayer.setDevice('keyboard');\n\t\t\tthisPlayer.interaction.released.push(playerAction);\n\t\t\tthisPlayer.interaction.lastReleased = playerAction;\n\n\t\t\t// Update timers\n\t\t\tthisPlayer.timers[playerAction].released = this.scene.sys.time.now;\n\t\t\tthisPlayer.timers[playerAction].duration = thisPlayer.timers[playerAction].released - thisPlayer.timers[playerAction].pressed;\n\t\t\tdelete thisPlayer.timers[playerAction]._tick;\n\n\t\t\t// Update mapped button object\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\n\t\t\t}\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 0;\n\t\t\t\t\tthisPlayer.interaction_mapped.released = mappedButton;\n\t\t\t\t\tthisPlayer.interaction_mapped.lastReleased = mappedButton;\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate through players and check for interaction with defined pointer buttons\n\t */\n\tcheckPointerInput() {\n\t\t// Check for pointer movement\n\t\tif (this.systems.input.activePointer.velocity.x != 0 || this.systems.input.activePointer.velocity.y != 0) {\n\t\t\tthis.players[0].setDevice('pointer');\n\t\t}\n\n\t\t// Loop through players and check for button presses\n\t\tfor (let thisPlayer of this.players) {\n\t\t\t// Loop through all the keys assigned to this player\n\t\t\tfor (var thisKey in thisPlayer.keys) {\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) { // Each definition for this key action\n\t\t\t\t\tif (['M1', 'M2', 'M3', 'M4', 'M5'].includes(thisValue[0])) {\n\t\t\t\t\t\t// Check to see if button is pressed (stored in P1, can't have two mice...)\n\t\t\t\t\t\tif (this.players[0].pointer[thisValue] == 1) {\n\t\t\t\t\t\t\tthisPlayer.buttons[thisKey] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// Gamepad functions\n\n\t/**\n\t * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\n\t * @param {number} index Button index\n\t * @param {number} value Button value\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\n\t */\n\tgamepadButtonDown(pad, button, value) {\n\t\tthis.players[pad.index].setDevice('gamepad');\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'DOWN' });\n\t\tthis.events.emit('gamepad_buttondown', { player: pad.index, button: `B${button.index}` });\n\n\t\t// Buttons\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\n\t\t\tlet playerAction = 'B' + button.index;\n\n\t\t\t// Update the last button state\n\t\t\tthis.players[pad.index].interaction.pressed.push(playerAction);\n\t\t\tthis.players[pad.index].interaction.last = playerAction;\n\t\t\tthis.players[pad.index].interaction.lastPressed = playerAction;\n\t\t\tthis.players[pad.index].interaction.buffer.push(playerAction);\n\n\t\t\t// Update timers\n\t\t\tthis.players[pad.index].timers[playerAction].pressed = this.scene.sys.time.now;\n\t\t\tthis.players[pad.index].timers[playerAction].released = 0;\n\t\t\tthis.players[pad.index].timers[playerAction].duration = 0;\n\n\t\t\t// Update mapped button object\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\n\t\t\tif (typeof mappedButton !== \"undefined\") {\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed.push(mappedButton);\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\n\t\t\t}\n\t\t}\n\t\t// DPad\n\t\telse {\n\t\t\tlet dpadMapping = this.dpadMappings;\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'DOWN' });\n\t\t\tthis.events.emit('gamepad_directiondown', { player: pad.index, button: direction });\n\n\t\t\tthis.players[pad.index].interaction.pressed.push(direction);\n\t\t\tthis.players[pad.index].interaction.last = direction;\n\t\t\tthis.players[pad.index].interaction.lastPressed = direction;\n\t\t\tthis.players[pad.index].interaction.buffer.push(direction);\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\n\t\t\t// Update timers\n\t\t\tthis.players[pad.index].timers[direction].pressed = this.scene.sys.time.now;\n\t\t\tthis.players[pad.index].timers[direction].released = 0;\n\t\t\tthis.players[pad.index].timers[direction].duration = 0;\n\n\n\t\t\t// Update mapped button object\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\n\t\t\tif (typeof mappedButton !== \"undefined\") {\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed.push(mappedButton);\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\n\t * @param {number} index Button index\n\t * @param {number} value Button value\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\n\t */\n\tgamepadButtonUp(pad, button, value) {\n\t\tthis.players[pad.index].setDevice('gamepad');\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\n\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'UP' });\n\t\tthis.events.emit('gamepad_buttonup', { player: pad.index, button: `B${button.index}` });\n\n\t\t// Buttons\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\n\t\t\tlet playerAction = 'B' + button.index;\n\n\t\t\t// Update the last button state\n\t\t\tthis.players[pad.index].interaction.released.push(playerAction);\n\t\t\tthis.players[pad.index].interaction.lastReleased = playerAction;\n\n\t\t\t// Update timers\n\t\t\tthis.players[pad.index].timers[playerAction].released = this.scene.sys.time.now;\n\t\t\tthis.players[pad.index].timers[playerAction].duration = this.players[pad.index].timers[playerAction].released - this.players[pad.index].timers[playerAction].pressed;\n\t\t\tdelete this.players[pad.index].timers[playerAction]._tick;\n\n\t\t\t// Update mapped button object\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\n\t\t\tif (typeof mappedButton !== \"undefined\") {\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\n\t\t\t}\n\t\t}\n\t\t// DPad\n\t\telse {\n\t\t\tlet dpadMapping = this.dpadMappings;\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'UP' });\n\t\t\tthis.events.emit('gamepad_directionup', { player: pad.index, button: direction });\n\n\t\t\tthis.players[pad.index].interaction.released.push(direction);\n\t\t\tthis.players[pad.index].interaction.lastReleased = direction;\n\n\t\t\t// Update timers\n\t\t\tthis.players[pad.index].timers[direction].released = this.scene.sys.time.now;\n\t\t\tthis.players[pad.index].timers[direction].duration = this.players[pad.index].timers[direction].released - this.players[pad.index].timers[direction].pressed;\n\t\t\tdelete this.players[pad.index].timers[direction]._tick;\n\n\t\t\t// Update mapped button object\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\n\t\t\tif (typeof mappedButton !== \"undefined\") {\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Some gamepads map dpads to axis, which are handled differently to buttons.\n\t * This function mimics a gamepad push and fires an event.\n\t * We also insert the direction into a buffer so that we know what buttons are pressed in the gamepadFakeDPadRelease function\n\t * We use an array for the buffer and pressed vars, as more than one button may be pressed at the same time, within the same step.\n\t */\n\tgamepadFakeDPadPress(gamepad, direction) {\n\t\tif (!this.players[gamepad.index].internal.fakedpadBuffer.includes(direction)) {\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer.push(direction);\n\t\t\tthis.players[gamepad.index].internal.fakedpadPressed.push(direction);\n\n\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\n\t\t\tthisButton.value = 1;\n\t\t\tthisButton.pressed = true;\n\t\t\tthisButton.events.emit('down', gamepad, thisButton, 1)\n\t\t}\n\t}\n\n\t/**\n\t * When the axis is blank, we know we've released all buttons.\n\t */\n\tgamepadFakeDPadRelease(gamepad) {\n\t\tif (this.players[gamepad.index].internal.fakedpadBuffer.length > 0) {\n\n\t\t\tfor (let direction of this.players[gamepad.index].internal.fakedpadBuffer) {\n\t\t\t\tthis.players[gamepad.index].internal.fakedpadReleased = direction;\n\n\t\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\n\t\t\t\tthisButton.value = 0;\n\t\t\t\tthisButton.pressed = false;\n\t\t\t\tthisButton.events.emit('up', gamepad, thisButton, 0)\n\t\t\t}\n\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer = [];\n\t\t}\n\t}\n\n\t/**\n\t * Iterate through gamepads and handle interactions\n\t */\n\tcheckGamepadInput() {\n\t\t// Check for gamepad input\n\t\tfor (var thisGamepad of this.gamepads) {\n\n\t\t\t// Set up a player if we don't have one, presumably due to race conditions in detecting gamepads\n\t\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\n\t\t\t\tthis.addPlayer();\n\t\t\t}\n\n\t\t\tlet direction = '';\n\n\t\t\t// Directions\n\t\t\tif (thisGamepad.leftStick.y < -this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\n\t\t\t\tif (thisGamepad.fakedpad) {\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'UP');\n\t\t\t\t\tdirection = 'UP'\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (thisGamepad.leftStick.y > this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\n\t\t\t\tif (thisGamepad.fakedpad) {\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'DOWN');\n\t\t\t\t\tdirection = 'DOWN'\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n\t\t\t\t// DPad\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\n\t\t\t}\n\n\t\t\tif (thisGamepad.leftStick.x < -this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\n\t\t\t\tif (thisGamepad.fakedpad) {\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'LEFT');\n\t\t\t\t\tdirection = 'LEFT'\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (thisGamepad.leftStick.x > this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\n\t\t\t\tif (thisGamepad.fakedpad) {\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'RIGHT');\n\t\t\t\t\tdirection = 'RIGHT'\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n\t\t\t\t// DPad\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\n\t\t\t}\n\n\t\t\tif (thisGamepad.fakedpad && direction == '') {\n\t\t\t\tthis.gamepadFakeDPadRelease(thisGamepad);\n\t\t\t}\n\n\t\t\t// Secondary\n\t\t\tif (thisGamepad.rightStick.y < -this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = Math.abs(thisGamepad.rightStick.y)\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\t\t\t}\n\t\t\telse if (thisGamepad.rightStick.y > this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = thisGamepad.rightStick.y\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = 0;\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = 0;\n\t\t\t}\n\n\t\t\tif (thisGamepad.rightStick.x < -this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = Math.abs(thisGamepad.rightStick.x)\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\t\t\t}\n\t\t\telse if (thisGamepad.rightStick.x > this.axisThreshold) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = thisGamepad.rightStick.x\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\tthis.players[thisGamepad.index].setDevice('gamepad');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = 0;\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = 0;\n\t\t\t}\n\n\t\t\tif (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n\t\t\t\t// Buttons\n\t\t\t\tfor (var b = 0; b < thisGamepad.buttons.length; b++) {\n\t\t\t\t\tlet button = thisGamepad.buttons[b];\n\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + b] = button.value;\n\t\t\t\t\t// Get mapped name for this button number and artificially update the relevant buttons_mapped key\n\t\t\t\t\tlet mappedButton = this.getMappedButton(this.players[thisGamepad.index], b);\n\t\t\t\t\tif (typeof mappedButton !== \"undefined\") {\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[mappedButton] = button.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If we're faking the d-pad, we won't have the extra buttons so we'll have to manually update the button objects\n\t\t\t\tif (thisGamepad.fakedpad) {\n\t\t\t\t\tif (direction == '') {\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons['B12'] = 0;\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons['B13'] = 0;\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons['B14'] = 0;\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons['B15'] = 0;\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[this.getMappedButton(this.players[thisGamepad.index], 'B12')] = 0;\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[this.getMappedButton(this.players[thisGamepad.index], 'B13')] = 0;\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[this.getMappedButton(this.players[thisGamepad.index], 'B14')] = 0;\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[this.getMappedButton(this.players[thisGamepad.index], 'B15')] = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + this.dpadMappings[direction]] = 1;\n\t\t\t\t\t\tlet mappedButton = this.getMappedButton(this.players[thisGamepad.index], 'B' + this.dpadMappings[direction]);\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[mappedButton] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Function to run on pointer move.\n\t * @param {*} pointer - The pointer object\n\t */\n\tpointerMove(pointer, threshold, numDirections) {\n\t\tif (this.players.length) {\n\t\t\tthreshold = threshold || -1;\n\t\t\tnumDirections = numDirections || this.numDirections;\n\n\t\t\tif (pointer.distance > threshold) {\n\t\t\t\tlet pointerDirection = this.getBearingFromAngle(pointer.angle, numDirections);\n\n\t\t\t\t// If we've been given a player position, return bearings and angles\n\t\t\t\tif (typeof this.players[0] !== 'undefined' && this.players[0].position.x !== 'undefined') {\n\n\t\t\t\t\tlet position = this.players[0].position;\n\t\t\t\t\tlet angleToPointer = Math.round(Phaser.Math.Angle.Between(position.x, position.y, pointer.x, pointer.y) * 100) / 100;\n\t\t\t\t\tlet angleDegrees = Math.round(Phaser.Math.RadToDeg(angleToPointer) * 100) / 100;\n\t\t\t\t\tpointerDirection = this.getBearingFromAngle(angleToPointer, numDirections);\n\t\t\t\t\tlet pointerAngle = Number(this.mapBearingToDegrees(pointerDirection));\n\n\t\t\t\t\tthis.players[0].pointer.BEARING = pointerDirection;\n\t\t\t\t\tthis.players[0].pointer.ANGLE = angleToPointer;\n\t\t\t\t\tthis.players[0].pointer.DEGREES = angleDegrees;\n\t\t\t\t\tthis.players[0].pointer.BEARING_DEGREES = pointerAngle;\n\t\t\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\n\n\t\t\t\t\tthis.players[0].pointer.POINTERANGLE = pointerAngle;\n\t\t\t\t\tthis.players[0].pointer.POINTERDIRECTION = pointerDirection;\n\t\t\t\t\tthis.players[0].pointer.PLAYERPOS = position;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Function to run on pointer down. Indicates that Mx has been pressed, which should be listened to by the player object\n\t * @param {*} pointer - The pointer object\n\t */\n\tpointerDown(pointer) {\n\t\tif (this.players.length) {\n\t\t\tlet action = '';\n\t\t\tthis.players[0].setDevice('pointer');\n\t\t\tif (pointer.leftButtonDown()) {\n\t\t\t\taction = 'M1';\n\t\t\t}\n\t\t\tif (pointer.rightButtonDown()) {\n\t\t\t\taction = 'M2';\n\t\t\t}\n\t\t\tif (pointer.middleButtonDown()) {\n\t\t\t\taction = 'M3';\n\t\t\t}\n\t\t\tif (pointer.backButtonDown()) {\n\t\t\t\taction = 'M4';\n\t\t\t}\n\t\t\tif (pointer.forwardButtonDown()) {\n\t\t\t\taction = 'M5';\n\t\t\t}\n\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'DOWN' });\n\t\t\tthis.events.emit('pointer_down', action);\n\n\t\t\tthis.players[0].pointer[action] = 1;\n\n\t\t\t// Update the last button state\n\t\t\tthis.players[0].interaction.pressed.push(action);\n\t\t\tthis.players[0].interaction.last = action;\n\t\t\tthis.players[0].interaction.lastPressed = action;\n\t\t\tthis.players[0].interaction.buffer.push(action);\n\t\t\tthis.players[0].pointer.TIMESTAMP = pointer.moveTime;\n\n\t\t\t// Update timers\n\t\t\tthis.players[0].timers[action].pressed = this.scene.sys.time.now;\n\t\t\tthis.players[0].timers[action].released = 0;\n\t\t\tthis.players[0].timers[action].duration = 0;\n\t\t}\n\t}\n\n\n\t/**\n\t * Function to run on pointer up. Indicates that Mx has been released, which should be listened to by the player object\n\t * @param {*} pointer - The pointer object\n\t */\n\tpointerUp(pointer) {\n\t\tif (this.players.length) {\n\t\t\tlet action = '';\n\t\t\tif (pointer.leftButtonReleased()) {\n\t\t\t\taction = 'M1';\n\t\t\t}\n\t\t\tif (pointer.rightButtonReleased()) {\n\t\t\t\taction = 'M2';\n\t\t\t}\n\t\t\tif (pointer.middleButtonReleased()) {\n\t\t\t\taction = 'M3';\n\t\t\t}\n\t\t\tif (pointer.backButtonReleased()) {\n\t\t\t\taction = 'M4';\n\t\t\t}\n\t\t\tif (pointer.forwardButtonReleased()) {\n\t\t\t\taction = 'M5';\n\t\t\t}\n\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'UP' });\n\t\t\tthis.events.emit('pointer_up', action);\n\n\t\t\tthis.players[0].pointer[action] = 0;\n\t\t\tthis.players[0].interaction.released.push(action);\n\t\t\tthis.players[0].interaction.lastReleased = action;\n\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\n\n\t\t\t// Update timers\n\t\t\tthis.players[0].timers[action].released = this.scene.sys.time.now;\n\t\t\tthis.players[0].timers[action].duration = this.players[0].timers[action].released - this.players[0].timers[action].pressed;\n\t\t\tdelete this.players[0].timers[action]._tick;\n\t\t}\n\t}\n\n\n\t/**\n     * Create new button combo.\n\t * Combos extend Phaser's keyboard combo and mimic their functionality for gamepad/player combinations.\n\t * If you requrie a keyboard entered combo, use the native Phaser.Input.Keyboard.KeyboardPlugin.createCombo function.\n\t *\n\t * @param {player} player - A player object. If more than one player should be able to execute the combo, you should create multiple buttonCombo instances.\n     * @param {(object[])} buttons - An array of buttons that comprise this combo. Use button IDs, mapped buttons or directions, e.g. ['UP', 'UP', 'DOWN', 'DOWN', 'LEFT', 'RIGHT', 'LEFT', 'RIGHT', 'RC_E', 'RC_S']\n     * @param {Phaser.Types.Input.Keyboard.KeyComboConfig} [config] - A Key Combo configuration object.\n     */\n    createButtonCombo(player, buttons, config) {\n        return new ButtonCombo(this, player, buttons, config);\n    }\n\n\n\t/**\n\t * Get the bearing from a given angle\n\t * @param {float} angle - Angle to use\n\t * @param {number} numDirections - Number of possible directions (e.g. 4 for N/S/E/W)\n\t */\n\tgetBearingFromAngle(angle, numDirections) {\n\t\tnumDirections = numDirections || this.numDirections;\n\n\t\tvar snap_interval = Phaser.Math.PI2 / numDirections;\n\n\t\tvar angleSnap = Phaser.Math.Snap.To(angle, snap_interval);\n\t\tvar angleSnapDeg = Number(Phaser.Math.RadToDeg(angleSnap).toFixed(2));\n\t\tvar angleSnapDir = this.bearings[angleSnapDeg];\n\n\t\treturn angleSnapDir;\n\t}\n\n\n\t/**\n\t * Given a bearing, return a direction object containing boolean flags for the four directions\n\t * @param {*} bearing\n\t */\n\tmapBearingToDirections(bearing) {\n\t\tlet thisDirection = {\n\t\t\t'UP': 0,\n\t\t\t'DOWN': 0,\n\t\t\t'LEFT': 0,\n\t\t\t'RIGHT': 0,\n\t\t\t'BEARING': bearing.toUpperCase()\n\t\t}\n\n\t\tif (bearing.toUpperCase().includes('W')) {\n\t\t\tthisDirection.LEFT = 1;\n\t\t}\n\t\tif (bearing.toUpperCase().includes('E')) {\n\t\t\tthisDirection.RIGHT = 1;\n\t\t}\n\t\tif (bearing.toUpperCase().includes('S')) {\n\t\t\tthisDirection.DOWN = 1;\n\t\t}\n\t\tif (bearing.toUpperCase().includes('N')) {\n\t\t\tthisDirection.UP = 1;\n\t\t}\n\n\t\treturn thisDirection;\n\t}\n\n\t/**\n\t * Given a directions object corresponding to analogue input, return an angle\n\t * @param {*} directions - Direction object containing UP, DOWN, LEFT, RIGHT values\n\t * @param {number} threshold - Threshold for analog input, e.g. 0.1\n\t * @returns {number} Calulated angle\n\t */\n\tmapDirectionsToAngle(directions, threshold) {\n\t\tthreshold = threshold || this.axisThreshold;\n\n\t\t// Get the analog values for each direction\n\t\tlet up = directions.UP || 0;\n\t\tlet down = directions.DOWN || 0;\n\t\tlet left = directions.LEFT || 0;\n\t\tlet right = directions.RIGHT || 0;\n\n\t\t// Apply threshold\n\t\tup = Math.abs(up) > threshold ? up : 0;\n\t\tdown = Math.abs(down) > threshold ? down : 0;\n\t\tleft = Math.abs(left) > threshold ? left : 0;\n\t\tright = Math.abs(right) > threshold ? right : 0;\n\n\t\t// Calculate net direction values\n\t\tlet x = right - left;  // Positive = right, negative = left\n\t\tlet y = down - up;     // Positive = down, negative = up\n\n\t\t// If no input, return null\n\t\tif (x === 0 && y === 0) {\n\t\t\treturn -1\n\t\t}\n\n\t\t// Calculate angle using atan2 (returns angle in radians from -π to π)\n\t\tlet angle = Math.atan2(y, x);\n\n\t\treturn angle;\n\t}\n\n\n\t/**\n\t * Given a directions object, return the applicable bearing\n\t * @param {*} directions\n\t * @param {number} threshold - Threshold for analog input, e.g. 0.1\n\t * @param {number} numDirections - Number of directions to snap to, 4/8/16/32.\n\t * @returns {string} Bearing, e.g. 'N', 'NE', 'E', etc.\n\t */\n\tmapDirectionsToBearing(directions, threshold, numDirections) {\n\t\tthreshold = threshold || 0;\n\t\tnumDirections = numDirections || this.numDirections;\n\n\t\t// Get the analog values for each direction\n\t\tlet up = directions.UP || 0;\n\t\tlet down = directions.DOWN || 0;\n\t\tlet left = directions.LEFT || 0;\n\t\tlet right = directions.RIGHT || 0;\n\n\t\t// Apply threshold\n\t\tup = Math.abs(up) > threshold ? up : 0;\n\t\tdown = Math.abs(down) > threshold ? down : 0;\n\t\tleft = Math.abs(left) > threshold ? left : 0;\n\t\tright = Math.abs(right) > threshold ? right : 0;\n\n\t\t// Calculate net direction values\n\t\tlet x = right - left;  // Positive = right, negative = left\n\t\tlet y = down - up;     // Positive = down, negative = up\n\n\t\t// If no input, return empty bearing\n\t\tif (x === 0 && y === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Calculate angle using atan2 (returns angle in radians from -π to π)\n\t\tlet angle = Math.atan2(y, x);\n\n\t\t// Convert to bearing\n\t\treturn this.getBearingFromAngle(angle, numDirections);\n\t}\n\n\t/**\n\t * Given a bearing, return the snapped angle in degrees\n\t * @param {*} bearing\n\t */\n\tmapBearingToDegrees(bearing) {\n\t\tif (bearing != '') {\n\t\t\treturn Object.keys(this.bearings).find(key => this.bearings[key] === bearing);\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tthis.shutdown();\n\t\tthis.scene = undefined;\n\t}\n\n\t/**\n\t * Return debug object\n\t */\n\tdebug() {\n\t\t// Debug variables\n\t\tvar debug = {\n\t\t\t'input': {}\n\t\t};\n\t\tdebug.input.gamepads = [];\n\n\t\tfor (var i = 0; i < this.gamepads.length; i++) {\n\t\t\tlet pad = this.gamepads[i];\n\t\t\tlet buttons = {};\n\t\t\tlet axes = {};\n\n\t\t\tfor (var b = 0; b < pad.buttons.length; b++) {\n\t\t\t\tlet button = pad.buttons[b];\n\t\t\t\tbuttons['B' + button.index] = button.value;\n\t\t\t}\n\n\t\t\tfor (var a = 0; a < pad.axes.length; a++) {\n\t\t\t\tlet axis = pad.axes[a];\n\t\t\t\taxes['A' + axis.index] = axis.getValue();\n\t\t\t}\n\n\t\t\tdebug.input.gamepads.push({\n\t\t\t\t'ID': pad.id,\n\t\t\t\t'Index': pad.index,\n\t\t\t\t'Buttons': buttons,\n\t\t\t\t'Axes': axes\n\t\t\t});\n\t\t}\n\n\t\tdebug.players = [];\n\t\tfor (let thisPlayer of this.players) {\n\t\t\tdebug.players.push({\n\t\t\t\t'interaction': thisPlayer.interaction,\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\n//\t\t\t\t'device': thisPlayer.interaction.device,\n\t\t\t\t'buttons': thisPlayer.buttons,\n\t\t\t\t'buttons_mapped': thisPlayer.buttons_mapped,\n\t\t\t\t'timers': thisPlayer.timers,\n\t\t\t\t'pointer': thisPlayer.pointer,\n\t\t\t\t'direction': thisPlayer.direction,\n\t\t\t\t'direction_secondary': thisPlayer.direction_secondary,\n\t\t\t\t'keys': thisPlayer.keys\n\t\t\t})\n\t\t}\n\n\t\treturn debug;\n\t}\n}\n"],"names":["module","exports","padID","padType","gamepadMapping","RC_S","RC_E","RC_W","RC_N","START","SELECT","LB","RB","LT","RT","LS","RS","LC_N","LC_S","LC_W","LC_E","MENU","TOUCH","bearings","pad_generic","pad_unlicensedSNES","pad_xbox360","pad_dualshock","controlManager","_classCallCheck","_createClass","key","value","mapGamepad","id","toLowerCase","padConfig","includes","getBaseControls","x","y","setupControls","numberOfButtons","controls","i","buttons","keys","timers","_i2","_arr","length","thisDirection","_i3","_arr2","thisPointer","setPosition","position","default","AdvanceKeyCombo","ResetKeyCombo","ButtonCombo","_Phaser$Input$Keyboar","mergedInput","player","config","_this","_callSuper","systems","input","keyboard","keyCodes","events","on","onButtonDown","current","_inherits","event","matched","enabled","ProcessButtonCombo","eventEmitter","emit","combo","action","resetOnMatch","deleteOnMatch","destroy","timeStamp","time","now","index","buttonMatch","button","mappedButton","getMappedButton","unMappedButton","getUnmappedButton","comboMatched","keyMatched","maxKeyDelay","timeLimit","timeLastMatched","resetOnWrongKey","timeMatched","off","_superPropGet","Phaser","Input","Keyboard","KeyCombo","MergedInput","_Phaser$Plugins$Scene","scene","pluginManager","players","gamepads","dpadMappings","axisThreshold","numDirections","Object","boot","_this2","Events","EventEmitter","game","Core","PRE_STEP","preupdate","POST_STEP","postupdate","BLUR","loseFocus","gamepad","thisGamepad","refreshGamepads","setupGamepad","refreshPads","total","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","gamepadButtonDown","gamepadButtonUp","keyboardKeyDown","keyboardKeyUp","mouse","disableContextMenu","position_last","pointerMove","activePointer","checkKeyboardInput","checkGamepadInput","checkPointerInput","_iterator2","_step2","thisPlayer","pointer","BEARING","BEARING_DEGREES","ANGLE","DEGREES","POINTERANGLE","POINTERDIRECTION","PLAYERPOS","direction","mapDirectionsToAngle","ANGLE_LAST","Math","round","RadToDeg","DEGREES_LAST","getBearingFromAngle","BEARING_LAST","parseFloat","mapBearingToDegrees","BEARING_DEGREES_LAST","direction_secondary","_iterator3","_step3","clearBuffer","interaction","pressed","internal","fakedpadPressed","buffer","interaction_mapped","fakedpadReleased","released","thisKey","reset","device","addPlayer","gamepadID","mappedPad","gamepadType","thisButton","buttons_mapped","setAxisThreshold","setNumDirections","filter","el","_iterator4","entries","_step4","_step4$value","_slicedToArray","fakedpad","_typeof","Number","isInteger","newPlayer","addPlayerHelperFunctions","push","pointerDown","pointerUp","_this3","isPressed","Array","matchedButtons","isDown","matchedDirections","matchedPointer","matchedAll","concat","_toConsumableArray","isReleased","checkDown","duration","includeFirst","undefined","downButtons","_iterator5","_step5","_loop","_tick","t","Snap","Floor","sys","once","unmappedButtons","_iterator6","_step6","unmappedButton","map","setDevice","getPlayer","getPlayerIndexFromKey","_iterator7","_step7","_iterator8","_step8","thisValue","getPlayerButtonFromKey","_iterator9","_step9","_iterator10","_step10","getPlayerActions","actions","apply","buttonID","toString","replace","find","buttonNo","dpadMapping","defineKey","arguments","append","addKey","KeyCodes","_iterator11","_step11","_iterator12","_step12","TIMESTAMP","keyCode","playerIndex","playerAction","state","last","lastPressed","lastReleased","velocity","_iterator13","_step13","_iterator14","_step14","pad","gamepadFakeDPadPress","fakedpadBuffer","Gamepad","Button","gamepadFakeDPadRelease","_iterator15","_step15","_iterator16","_step16","leftStick","UP","abs","DOWN","up","down","LEFT","RIGHT","left","right","rightStick","b","threshold","distance","pointerDirection","angle","angleToPointer","Angle","Between","angleDegrees","pointerAngle","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","moveTime","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","createButtonCombo","snap_interval","PI2","angleSnap","To","angleSnapDeg","toFixed","angleSnapDir","mapBearingToDirections","bearing","toUpperCase","directions","atan2","mapDirectionsToBearing","_this4","shutdown","debug","axes","a","axis","getValue","_iterator17","_step17","Plugins","ScenePlugin"],"sourceRoot":""}